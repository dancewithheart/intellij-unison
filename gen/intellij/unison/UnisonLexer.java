// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Unison.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
/* Unison lexer specification */
/* ===================== User Code =================== */
package intellij.unison;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.unison.language.psi.UnisonTypes.*;


public class UnisonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\37"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\37\1\54\1\55\1\56\1\37\1\57"+
    "\1\60\1\61\1\6\1\62\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\37\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\37\1\54\1\55\1\56\1\37\1\63\1\64"+
    "\1\65\1\6\6\0\1\3\252\0\2\66\115\0\1\67"+
    "\u01a8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\2\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\20\1\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\2\1\0\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\0\1\1\1\42\5\1\1\43\3\1\1\44\15\1"+
    "\1\0\2\1\2\0\1\45\1\44\2\0\2\34\1\46"+
    "\1\47\1\1\1\0\3\1\1\0\3\1\1\0\2\1"+
    "\1\50\1\51\2\1\1\52\1\53\7\1\1\0\2\54"+
    "\2\1\3\0\1\50\3\0\1\1\1\0\3\1\1\0"+
    "\1\55\1\1\2\56\1\0\5\1\1\57\1\60\1\61"+
    "\1\62\1\1\1\0\1\1\2\63\4\0\1\1\1\0"+
    "\1\1\2\64\2\65\1\1\1\61\1\66\1\67\1\1"+
    "\1\0\3\1\1\0\1\70\1\40\2\0\1\1\1\0"+
    "\1\1\1\71\1\1\1\0\2\1\2\72\1\0\1\34"+
    "\2\73\1\74\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\75\2\76"+
    "\1\1\1\0\2\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\250\0\250\0\u0118"+
    "\0\u0150\0\u0188\0\70\0\250\0\u01c0\0\70\0\u01f8\0\70"+
    "\0\250\0\u0230\0\250\0\250\0\u0268\0\250\0\u02a0\0\70"+
    "\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460"+
    "\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\70\0\250\0\70\0\u0428\0\u0658\0\u0690\0\70\0\u06c8"+
    "\0\u0700\0\u0738\0\u0770\0\250\0\70\0\70\0\u07a8\0\250"+
    "\0\u07e0\0\u0818\0\70\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0428\0\u0a48\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\250"+
    "\0\70\0\u0e38\0\u0e70\0\u0738\0\u0ea8\0\u07e0\0\250\0\u0ee0"+
    "\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u10d8\0\u1110\0\u1148\0\u0428\0\u0428\0\u1180\0\u11b8\0\u0428"+
    "\0\u0428\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340"+
    "\0\u1378\0\u0428\0\70\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\70\0\u14c8\0\u0ea8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0"+
    "\0\u1618\0\u1650\0\u0428\0\u1688\0\u0428\0\70\0\u16c0\0\u16f8"+
    "\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u0428\0\u0428\0\u0428\0\u0428"+
    "\0\u1810\0\u1848\0\u1880\0\u0428\0\70\0\u18b8\0\u18f0\0\u1928"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u0428\0\70\0\u0428\0\70"+
    "\0\u1a40\0\70\0\u0428\0\u0428\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20"+
    "\0\u1b58\0\u1b90\0\u0428\0\70\0\u1bc8\0\u1c00\0\u1c38\0\u1c70"+
    "\0\u1ca8\0\u0428\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u0428\0\70"+
    "\0\u1dc0\0\70\0\u0428\0\70\0\u0428\0\u1df8\0\u1e30\0\u1e68"+
    "\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028"+
    "\0\u2060\0\u0428\0\70\0\u0428\0\70\0\u2098\0\u20d0\0\u0428"+
    "\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\2\37\1\40"+
    "\1\41\1\42\1\43\1\44\3\37\1\45\1\46\1\47"+
    "\1\50\2\37\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\71\0\2\3\71\0\1\6\1\0"+
    "\3\6\3\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\31\0\1\6\3\0\1\6\3\0\2\62\1\0"+
    "\2\62\1\63\62\62\4\0\1\6\1\0\2\6\1\64"+
    "\3\0\2\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\31\0\1\6\3\0\1\6\66\0\1\65\17\0\1\66"+
    "\60\0\1\6\1\0\3\6\3\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\22\4\6\31\0\1\6\3\0\1\6"+
    "\7\0\1\6\1\0\3\6\3\0\2\6\1\0\1\67"+
    "\1\0\1\6\1\22\3\6\1\70\31\0\1\6\3\0"+
    "\1\6\23\0\1\71\1\0\1\22\51\0\1\6\1\0"+
    "\3\6\3\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\1\72\1\6\31\0\1\6\3\0\1\6\3\0"+
    "\2\73\2\0\64\73\22\0\1\37\6\0\1\37\1\74"+
    "\24\37\3\0\1\37\27\0\1\37\6\0\14\37\1\75"+
    "\10\37\1\76\3\0\1\37\27\0\1\37\6\0\1\77"+
    "\6\37\1\100\16\37\3\0\1\37\27\0\1\37\6\0"+
    "\14\37\1\101\11\37\3\0\1\37\27\0\1\37\6\0"+
    "\11\37\1\102\14\37\3\0\1\37\27\0\1\37\6\0"+
    "\1\103\10\37\1\104\14\37\3\0\1\37\27\0\1\37"+
    "\6\0\26\37\3\0\1\37\27\0\1\37\6\0\5\37"+
    "\1\105\5\37\1\106\12\37\3\0\1\37\27\0\1\37"+
    "\6\0\4\37\1\107\21\37\3\0\1\37\27\0\1\37"+
    "\6\0\1\110\25\37\3\0\1\37\27\0\1\37\6\0"+
    "\1\111\13\37\1\112\11\37\3\0\1\37\27\0\1\37"+
    "\6\0\21\37\1\113\4\37\3\0\1\37\27\0\1\37"+
    "\6\0\21\37\1\114\4\37\3\0\1\37\27\0\1\37"+
    "\6\0\4\37\1\115\2\37\1\116\7\37\1\117\5\37"+
    "\1\120\3\0\1\37\27\0\1\37\6\0\13\37\1\121"+
    "\4\37\1\122\5\37\3\0\1\37\4\0\1\123\22\0"+
    "\1\37\6\0\7\37\1\124\1\125\15\37\3\0\1\37"+
    "\3\0\1\126\20\0\1\127\54\0\1\6\1\0\3\6"+
    "\3\0\2\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\31\0\1\6\3\0\1\130\41\0\1\131\5\0\1\132"+
    "\75\0\1\133\15\0\2\62\1\0\2\62\1\134\64\62"+
    "\1\0\2\62\1\135\62\62\2\67\1\0\65\67\22\0"+
    "\1\136\51\0\1\6\1\0\3\6\3\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\1\137\1\6\31\0"+
    "\1\6\3\0\1\6\25\0\1\37\6\0\10\37\1\140"+
    "\15\37\3\0\1\37\3\0\1\141\23\0\1\37\6\0"+
    "\14\37\1\142\11\37\3\0\1\37\27\0\1\37\6\0"+
    "\21\37\1\143\4\37\3\0\1\37\27\0\1\37\6\0"+
    "\20\37\1\144\5\37\3\0\1\37\4\0\1\145\22\0"+
    "\1\37\6\0\1\146\25\37\3\0\1\37\27\0\1\37"+
    "\6\0\22\37\1\147\3\37\3\0\1\37\27\0\1\37"+
    "\6\0\20\37\1\150\5\37\3\0\1\37\4\0\1\151"+
    "\22\0\1\37\6\0\11\37\1\152\14\37\3\0\1\37"+
    "\27\0\1\37\6\0\14\37\1\153\11\37\3\0\1\37"+
    "\27\0\1\37\6\0\21\37\1\154\4\37\3\0\1\37"+
    "\27\0\1\37\6\0\21\37\1\155\4\37\3\0\1\37"+
    "\27\0\1\37\6\0\21\37\1\156\4\37\3\0\1\37"+
    "\27\0\1\37\6\0\12\37\1\157\6\37\1\160\4\37"+
    "\3\0\1\37\27\0\1\37\6\0\21\37\1\161\4\37"+
    "\3\0\1\37\27\0\1\37\6\0\7\37\1\162\16\37"+
    "\3\0\1\37\27\0\1\37\6\0\17\37\1\163\6\37"+
    "\3\0\1\37\27\0\1\37\6\0\24\37\1\164\1\37"+
    "\3\0\1\37\27\0\1\37\6\0\4\37\1\165\21\37"+
    "\3\0\1\37\27\0\1\37\6\0\22\37\1\166\3\37"+
    "\3\0\1\37\27\0\1\37\6\0\15\37\1\167\10\37"+
    "\3\0\1\37\27\0\1\37\6\0\10\37\1\170\15\37"+
    "\3\0\1\37\3\0\1\171\23\0\1\37\6\0\4\37"+
    "\1\172\21\37\3\0\1\37\42\0\1\173\54\0\1\37"+
    "\6\0\4\37\1\174\21\37\3\0\1\37\27\0\1\37"+
    "\6\0\21\37\1\175\4\37\3\0\1\37\57\0\1\176"+
    "\15\0\17\177\1\200\50\177\52\0\1\201\65\0\1\202"+
    "\17\0\2\203\1\204\2\203\1\134\62\203\22\0\1\37"+
    "\6\0\11\37\1\205\14\37\3\0\1\37\47\0\1\206"+
    "\47\0\1\37\6\0\11\37\1\207\14\37\3\0\1\37"+
    "\27\0\1\37\6\0\4\37\1\210\21\37\3\0\1\37"+
    "\27\0\1\37\6\0\4\37\1\211\21\37\3\0\1\37"+
    "\42\0\1\212\54\0\1\37\6\0\17\37\1\213\6\37"+
    "\3\0\1\37\27\0\1\37\6\0\1\37\1\214\24\37"+
    "\3\0\1\37\27\0\1\37\6\0\4\37\1\215\21\37"+
    "\3\0\1\37\42\0\1\216\54\0\1\37\6\0\20\37"+
    "\1\166\5\37\3\0\1\37\4\0\1\217\22\0\1\37"+
    "\6\0\1\220\25\37\3\0\1\37\27\0\1\37\6\0"+
    "\2\37\1\221\23\37\3\0\1\37\27\0\1\37\6\0"+
    "\4\37\1\222\21\37\3\0\1\37\27\0\1\37\6\0"+
    "\4\37\1\223\21\37\3\0\1\37\27\0\1\37\6\0"+
    "\22\37\1\224\3\37\3\0\1\37\27\0\1\37\6\0"+
    "\21\37\1\225\4\37\3\0\1\37\27\0\1\37\6\0"+
    "\13\37\1\226\12\37\3\0\1\37\27\0\1\37\6\0"+
    "\4\37\1\227\21\37\3\0\1\37\27\0\1\37\6\0"+
    "\4\37\1\230\21\37\3\0\1\37\27\0\1\37\6\0"+
    "\16\37\1\231\7\37\3\0\1\37\54\0\1\232\42\0"+
    "\1\37\6\0\17\37\1\233\6\37\3\0\1\37\27\0"+
    "\1\37\6\0\7\37\1\234\16\37\3\0\1\37\45\0"+
    "\1\235\27\0\17\177\1\236\50\177\17\0\1\237\123\0"+
    "\1\240\14\0\5\204\1\241\62\204\22\0\1\37\6\0"+
    "\10\37\1\242\15\37\3\0\1\37\3\0\1\243\42\0"+
    "\1\243\24\0\1\243\23\0\1\37\6\0\4\37\1\244"+
    "\21\37\3\0\1\37\27\0\1\37\6\0\20\37\1\245"+
    "\5\37\3\0\1\37\4\0\1\246\22\0\1\37\6\0"+
    "\20\37\1\247\5\37\3\0\1\37\4\0\1\250\51\0"+
    "\1\250\15\0\1\250\22\0\1\37\6\0\11\37\1\251"+
    "\14\37\3\0\1\37\42\0\1\252\54\0\1\37\6\0"+
    "\21\37\1\253\4\37\3\0\1\37\27\0\1\37\6\0"+
    "\7\37\1\254\16\37\3\0\1\37\27\0\1\37\6\0"+
    "\20\37\1\255\5\37\3\0\1\37\4\0\1\256\22\0"+
    "\1\37\6\0\17\37\1\257\6\37\3\0\1\37\27\0"+
    "\1\37\6\0\2\37\1\260\23\37\3\0\1\37\27\0"+
    "\1\37\6\0\22\37\1\261\3\37\3\0\1\37\60\0"+
    "\1\262\36\0\1\37\6\0\4\37\1\263\21\37\3\0"+
    "\1\37\5\0\17\177\1\236\45\177\1\264\2\177\17\0"+
    "\1\237\45\0\1\264\35\0\1\265\41\0\1\266\104\0"+
    "\1\37\6\0\21\37\1\267\4\37\3\0\1\37\57\0"+
    "\1\270\37\0\1\37\6\0\1\271\25\37\3\0\1\37"+
    "\27\0\1\37\6\0\4\37\1\272\21\37\3\0\1\37"+
    "\27\0\1\37\6\0\15\37\1\273\10\37\3\0\1\37"+
    "\53\0\1\274\43\0\1\37\6\0\23\37\1\275\2\37"+
    "\3\0\1\37\27\0\1\37\6\0\21\37\1\276\4\37"+
    "\3\0\1\37\27\0\1\37\6\0\4\37\1\277\21\37"+
    "\3\0\1\37\42\0\1\300\104\0\1\301\22\0\1\302"+
    "\104\0\1\37\6\0\25\37\1\303\3\0\1\37\63\0"+
    "\1\304\33\0\1\37\6\0\13\37\1\305\12\37\3\0"+
    "\1\37\27\0\1\37\6\0\1\306\25\37\3\0\1\37"+
    "\36\0\1\307\60\0\1\37\6\0\10\37\1\310\15\37"+
    "\3\0\1\37\3\0\1\311\23\0\1\37\6\0\22\37"+
    "\1\312\3\37\3\0\1\37\60\0\1\313\36\0\1\37"+
    "\6\0\2\37\1\314\23\37\3\0\1\37\40\0\1\315"+
    "\56\0\1\37\6\0\20\37\1\316\5\37\3\0\1\37"+
    "\4\0\1\317\51\0\1\317\15\0\1\317\22\0\1\37"+
    "\6\0\17\37\1\320\6\37\3\0\1\37\55\0\1\321"+
    "\41\0\1\37\6\0\4\37\1\322\21\37\3\0\1\37"+
    "\42\0\1\323\54\0\1\37\6\0\4\37\1\324\21\37"+
    "\3\0\1\37\42\0\1\325\54\0\1\37\6\0\1\326"+
    "\25\37\3\0\1\37\36\0\1\327\60\0\1\37\6\0"+
    "\11\37\1\330\14\37\3\0\1\37\47\0\1\331\25\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8456];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\10\1\1\11\2\1\1\11\1\1\1\11"+
    "\7\1\1\11\20\1\1\11\1\1\1\11\3\1\1\11"+
    "\2\1\1\0\2\1\2\11\2\1\1\0\1\1\1\11"+
    "\27\1\1\0\2\1\2\0\1\1\1\11\2\0\5\1"+
    "\1\0\3\1\1\0\3\1\1\0\17\1\1\0\1\1"+
    "\1\11\2\1\3\0\1\11\3\0\1\1\1\0\3\1"+
    "\1\0\3\1\1\11\1\0\12\1\1\0\2\1\1\11"+
    "\4\0\1\1\1\0\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\3\1\1\0\3\1\1\0\1\1\1\11\2\0"+
    "\1\1\1\0\3\1\1\0\3\1\1\11\1\0\1\11"+
    "\1\1\1\11\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public UnisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return IDENTIFIER_TOKEN;
            }
          // fall through
          case 64: break;
          case 2:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 65: break;
          case 3:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 66: break;
          case 4:
            { return BANG;
            }
          // fall through
          case 67: break;
          case 5:
            { return MOD;
            }
          // fall through
          case 68: break;
          case 6:
            { return CIAPEK;
            }
          // fall through
          case 69: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 70: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 71: break;
          case 9:
            { return STAR;
            }
          // fall through
          case 72: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 73: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 74: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 75: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 76: break;
          case 14:
            { return DIV;
            }
          // fall through
          case 77: break;
          case 15:
            { return INT_TOKEN;
            }
          // fall through
          case 78: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 79: break;
          case 17:
            { return GT;
            }
          // fall through
          case 80: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 81: break;
          case 19:
            { return LT;
            }
          // fall through
          case 82: break;
          case 20:
            { return AT;
            }
          // fall through
          case 83: break;
          case 21:
            { return LPARENSQ;
            }
          // fall through
          case 84: break;
          case 22:
            { return LAMBDA;
            }
          // fall through
          case 85: break;
          case 23:
            { return RPARENSQ;
            }
          // fall through
          case 86: break;
          case 24:
            { return UNDERSCORE;
            }
          // fall through
          case 87: break;
          case 25:
            { return LBRACE;
            }
          // fall through
          case 88: break;
          case 26:
            { return BAR;
            }
          // fall through
          case 89: break;
          case 27:
            { return RBRACE;
            }
          // fall through
          case 90: break;
          case 28:
            { return STRING_TOKEN;
            }
          // fall through
          case 91: break;
          case 29:
            { return AND;
            }
          // fall through
          case 92: break;
          case 30:
            { return LBRACECIAPEK;
            }
          // fall through
          case 93: break;
          case 31:
            { return EMPTYBRACES;
            }
          // fall through
          case 94: break;
          case 32:
            { return COMMENT;
            }
          // fall through
          case 95: break;
          case 33:
            { return ARROW;
            }
          // fall through
          case 96: break;
          case 34:
            { return CHAR_TOKEN;
            }
          // fall through
          case 97: break;
          case 35:
            { return DO;
            }
          // fall through
          case 98: break;
          case 36:
            { return IF;
            }
          // fall through
          case 99: break;
          case 37:
            { return OR;
            }
          // fall through
          case 100: break;
          case 38:
            { return DOUBLE_TOKEN;
            }
          // fall through
          case 101: break;
          case 39:
            { return EQ3;
            }
          // fall through
          case 102: break;
          case 40:
            { return INT;
            }
          // fall through
          case 103: break;
          case 41:
            { return LET;
            }
          // fall through
          case 104: break;
          case 42:
            { return NAT;
            }
          // fall through
          case 105: break;
          case 43:
            { return NOT;
            }
          // fall through
          case 106: break;
          case 44:
            { return USE;
            }
          // fall through
          case 107: break;
          case 45:
            { return CHAR;
            }
          // fall through
          case 108: break;
          case 46:
            { return ELSE;
            }
          // fall through
          case 109: break;
          case 47:
            { return TEXT;
            }
          // fall through
          case 110: break;
          case 48:
            { return THEN;
            }
          // fall through
          case 111: break;
          case 49:
            { return BOOLEAN_TOKEN;
            }
          // fall through
          case 112: break;
          case 50:
            { return TYPE;
            }
          // fall through
          case 113: break;
          case 51:
            { return WITH;
            }
          // fall through
          case 114: break;
          case 52:
            { return BYTES;
            }
          // fall through
          case 115: break;
          case 53:
            { return CASES;
            }
          // fall through
          case 116: break;
          case 54:
            { return FLOAT;
            }
          // fall through
          case 117: break;
          case 55:
            { return MATCH;
            }
          // fall through
          case 118: break;
          case 56:
            { return WHERE;
            }
          // fall through
          case 119: break;
          case 57:
            { return DOUBLE;
            }
          // fall through
          case 120: break;
          case 58:
            { return UNIQUE;
            }
          // fall through
          case 121: break;
          case 59:
            { return ABILITY;
            }
          // fall through
          case 122: break;
          case 60:
            { return BOOLEAN;
            }
          // fall through
          case 123: break;
          case 61:
            { return NAMESPACE;
            }
          // fall through
          case 124: break;
          case 62:
            { return OTHERWISE;
            }
          // fall through
          case 125: break;
          case 63:
            { return STRUCTURAL;
            }
          // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
