// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Unison.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
/* Unison lexer specification */
/* ===================== User Code =================== */
package intellij.unison;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.unison.language.psi.UnisonTypes.*;


public class UnisonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\1\u0500\265\u0200\10\u0600"+
    "\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\37"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\37\1\55\1\56\1\57\1\37"+
    "\1\60\1\61\1\62\1\6\1\63\1\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\37"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\37\1\55\1\56\1\57\1\37"+
    "\1\64\1\65\1\66\1\6\6\0\1\3\252\0\2\67"+
    "\115\0\1\70\u01a8\0\2\3\u0100\0\1\71\325\0\1\72"+
    "\377\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\2\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\21\1\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\2\1\34\1\0\1\35\1\0\1\36\1\37\1\40"+
    "\1\41\1\42\1\0\1\1\1\43\6\1\1\44\5\1"+
    "\1\45\16\1\1\0\2\1\2\0\1\46\1\45\2\0"+
    "\1\35\1\0\1\35\1\47\1\50\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\3\1\1\0\4\1\1\51\1\52"+
    "\1\1\1\53\1\1\1\54\1\55\10\1\1\0\2\56"+
    "\2\1\3\0\1\51\2\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\57\1\1\2\60\1\0\5\1\1\0"+
    "\3\1\1\61\1\62\1\63\1\64\1\1\1\0\1\1"+
    "\2\65\4\0\1\1\1\0\2\66\1\1\2\67\2\70"+
    "\1\1\1\63\1\71\2\1\1\72\1\1\1\0\1\73"+
    "\5\1\1\0\1\74\1\41\2\0\1\1\1\0\1\1"+
    "\1\75\1\76\1\77\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\100\1\0\2\101\1\102\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\103\2\104\1\0\2\105\2\106\1\1"+
    "\1\0\2\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\261\0\261\0\u0127"+
    "\0\u0162\0\u019d\0\73\0\261\0\u01d8\0\73\0\u0213\0\73"+
    "\0\261\0\u024e\0\261\0\261\0\u0289\0\261\0\u02c4\0\73"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\73\0\261\0\73\0\u0461\0\u06ea\0\u0725\0\73"+
    "\0\u0760\0\u079b\0\73\0\u07d6\0\u0811\0\u084c\0\261\0\73"+
    "\0\73\0\u0887\0\261\0\u08c2\0\u08fd\0\73\0\u0938\0\u0973"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0461\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\261\0\73"+
    "\0\u105d\0\u1098\0\73\0\u10d3\0\u07d6\0\u08c2\0\261\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u0461"+
    "\0\u0461\0\u14be\0\u0461\0\u14f9\0\u1534\0\u0461\0\u156f\0\u15aa"+
    "\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u0461"+
    "\0\73\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\73\0\u18a9"+
    "\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u0461\0\u1af7\0\u0461\0\73\0\u1b32\0\u1b6d\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u0461"+
    "\0\u0461\0\u0461\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u0461\0\73"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u0461\0\73"+
    "\0\u1fce\0\u0461\0\73\0\u0461\0\73\0\u2009\0\73\0\u0461"+
    "\0\u2044\0\u207f\0\u0461\0\u20ba\0\u20f5\0\73\0\u2130\0\u216b"+
    "\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u0461\0\73\0\u2292\0\u22cd"+
    "\0\u2308\0\u2343\0\u237e\0\u0461\0\u0461\0\u0461\0\u23b9\0\u23f4"+
    "\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u0461\0\73"+
    "\0\u2591\0\u0461\0\73\0\u0461\0\u25cc\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u0461\0\73\0\u0461\0\73\0\u2941"+
    "\0\u0461\0\73\0\u0461\0\73\0\u297c\0\u29b7\0\u0461\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\37\1\42\1\43\1\44\1\45\3\37\1\46"+
    "\1\47\1\50\1\51\2\37\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\2\1\63\74\0"+
    "\2\3\74\0\1\6\1\0\3\6\3\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\32\0\1\6\3\0"+
    "\1\6\5\0\2\64\1\0\2\64\1\65\53\64\1\66"+
    "\11\64\4\0\1\6\1\0\2\6\1\67\3\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\32\0\1\6"+
    "\3\0\1\6\71\0\1\70\21\0\1\71\63\0\1\6"+
    "\1\0\3\6\3\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\22\4\6\32\0\1\6\3\0\1\6\11\0\1\6"+
    "\1\0\3\6\3\0\2\6\1\0\1\72\1\0\1\6"+
    "\1\22\3\6\1\73\32\0\1\6\3\0\1\6\25\0"+
    "\1\74\1\0\1\22\54\0\1\6\1\0\3\6\3\0"+
    "\2\6\1\0\1\6\1\0\1\6\1\0\2\6\1\75"+
    "\1\6\32\0\1\6\3\0\1\6\5\0\2\76\2\0"+
    "\67\76\22\0\1\37\6\0\1\37\1\77\10\37\1\100"+
    "\14\37\3\0\1\37\31\0\1\37\6\0\15\37\1\101"+
    "\10\37\1\102\3\0\1\37\31\0\1\37\6\0\1\103"+
    "\6\37\1\104\17\37\3\0\1\37\31\0\1\37\6\0"+
    "\15\37\1\105\11\37\3\0\1\37\31\0\1\37\6\0"+
    "\12\37\1\106\14\37\3\0\1\37\31\0\1\37\6\0"+
    "\1\107\11\37\1\110\2\37\1\111\11\37\3\0\1\37"+
    "\31\0\1\37\6\0\27\37\3\0\1\37\31\0\1\37"+
    "\6\0\1\112\26\37\3\0\1\37\31\0\1\37\6\0"+
    "\5\37\1\113\6\37\1\114\12\37\3\0\1\37\31\0"+
    "\1\37\6\0\4\37\1\115\22\37\3\0\1\37\31\0"+
    "\1\37\6\0\1\116\14\37\1\117\11\37\3\0\1\37"+
    "\31\0\1\37\6\0\1\120\14\37\1\121\11\37\3\0"+
    "\1\37\31\0\1\37\6\0\22\37\1\122\4\37\3\0"+
    "\1\37\31\0\1\37\6\0\22\37\1\123\4\37\3\0"+
    "\1\37\31\0\1\37\6\0\4\37\1\124\2\37\1\125"+
    "\10\37\1\126\5\37\1\127\3\0\1\37\31\0\1\37"+
    "\6\0\14\37\1\130\4\37\1\131\5\37\3\0\1\37"+
    "\4\0\1\132\24\0\1\37\6\0\7\37\1\133\1\134"+
    "\16\37\3\0\1\37\3\0\1\135\22\0\1\136\57\0"+
    "\1\6\1\0\3\6\3\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\32\0\1\6\3\0\1\137\43\0"+
    "\1\140\6\0\1\141\100\0\1\142\17\0\2\64\1\0"+
    "\2\64\1\143\53\64\1\66\11\64\5\0\1\144\65\0"+
    "\2\64\1\0\2\64\1\145\53\64\1\66\11\64\2\72"+
    "\1\0\70\72\22\0\1\146\54\0\1\6\1\0\3\6"+
    "\3\0\2\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\1\147\1\6\32\0\1\6\3\0\1\6\27\0\1\37"+
    "\6\0\10\37\1\150\16\37\3\0\1\37\3\0\1\151"+
    "\25\0\1\37\6\0\10\37\1\152\16\37\3\0\1\37"+
    "\3\0\1\153\25\0\1\37\6\0\15\37\1\154\11\37"+
    "\3\0\1\37\31\0\1\37\6\0\22\37\1\155\4\37"+
    "\3\0\1\37\31\0\1\37\6\0\21\37\1\156\5\37"+
    "\3\0\1\37\4\0\1\157\24\0\1\37\6\0\1\160"+
    "\26\37\3\0\1\37\31\0\1\37\6\0\23\37\1\161"+
    "\3\37\3\0\1\37\31\0\1\37\6\0\21\37\1\162"+
    "\5\37\3\0\1\37\4\0\1\163\24\0\1\37\6\0"+
    "\12\37\1\164\14\37\3\0\1\37\31\0\1\37\6\0"+
    "\15\37\1\165\11\37\3\0\1\37\31\0\1\37\6\0"+
    "\20\37\1\166\6\37\3\0\1\37\31\0\1\37\6\0"+
    "\14\37\1\167\12\37\3\0\1\37\31\0\1\37\6\0"+
    "\22\37\1\170\4\37\3\0\1\37\31\0\1\37\6\0"+
    "\22\37\1\171\4\37\3\0\1\37\31\0\1\37\6\0"+
    "\22\37\1\172\4\37\3\0\1\37\31\0\1\37\6\0"+
    "\3\37\1\173\23\37\3\0\1\37\31\0\1\37\6\0"+
    "\13\37\1\174\6\37\1\175\4\37\3\0\1\37\31\0"+
    "\1\37\6\0\22\37\1\176\4\37\3\0\1\37\31\0"+
    "\1\37\6\0\7\37\1\177\17\37\3\0\1\37\31\0"+
    "\1\37\6\0\20\37\1\200\6\37\3\0\1\37\31\0"+
    "\1\37\6\0\20\37\1\201\4\37\1\202\1\37\3\0"+
    "\1\37\31\0\1\37\6\0\4\37\1\203\22\37\3\0"+
    "\1\37\31\0\1\37\6\0\23\37\1\204\3\37\3\0"+
    "\1\37\31\0\1\37\6\0\16\37\1\205\10\37\3\0"+
    "\1\37\31\0\1\37\6\0\10\37\1\206\16\37\3\0"+
    "\1\37\3\0\1\207\25\0\1\37\6\0\4\37\1\210"+
    "\22\37\3\0\1\37\44\0\1\211\57\0\1\37\6\0"+
    "\4\37\1\212\22\37\3\0\1\37\31\0\1\37\6\0"+
    "\22\37\1\213\4\37\3\0\1\37\62\0\1\214\17\0"+
    "\17\215\1\216\53\215\53\0\1\217\70\0\1\220\21\0"+
    "\5\221\1\0\65\221\22\0\1\37\6\0\12\37\1\222"+
    "\14\37\3\0\1\37\52\0\1\223\51\0\1\37\6\0"+
    "\1\224\26\37\3\0\1\37\40\0\1\225\63\0\1\37"+
    "\6\0\12\37\1\226\14\37\3\0\1\37\31\0\1\37"+
    "\6\0\4\37\1\227\22\37\3\0\1\37\31\0\1\37"+
    "\6\0\4\37\1\230\22\37\3\0\1\37\44\0\1\231"+
    "\57\0\1\37\6\0\20\37\1\232\6\37\3\0\1\37"+
    "\31\0\1\37\6\0\1\37\1\233\25\37\3\0\1\37"+
    "\31\0\1\37\6\0\4\37\1\234\22\37\3\0\1\37"+
    "\44\0\1\235\57\0\1\37\6\0\21\37\1\204\5\37"+
    "\3\0\1\37\4\0\1\236\24\0\1\37\6\0\1\237"+
    "\26\37\3\0\1\37\31\0\1\37\6\0\1\240\26\37"+
    "\3\0\1\37\31\0\1\37\6\0\3\37\1\241\23\37"+
    "\3\0\1\37\31\0\1\37\6\0\2\37\1\242\24\37"+
    "\3\0\1\37\31\0\1\37\6\0\4\37\1\243\22\37"+
    "\3\0\1\37\27\0\1\244\1\0\1\37\6\0\27\37"+
    "\3\0\1\37\31\0\1\37\6\0\4\37\1\245\22\37"+
    "\3\0\1\37\31\0\1\37\6\0\23\37\1\246\3\37"+
    "\3\0\1\37\31\0\1\37\6\0\13\37\1\247\13\37"+
    "\3\0\1\37\31\0\1\37\6\0\22\37\1\250\4\37"+
    "\3\0\1\37\31\0\1\37\6\0\14\37\1\251\12\37"+
    "\3\0\1\37\31\0\1\37\6\0\4\37\1\252\22\37"+
    "\3\0\1\37\31\0\1\37\6\0\4\37\1\253\22\37"+
    "\3\0\1\37\31\0\1\37\6\0\17\37\1\254\7\37"+
    "\3\0\1\37\57\0\1\255\44\0\1\37\6\0\20\37"+
    "\1\256\6\37\3\0\1\37\31\0\1\37\6\0\7\37"+
    "\1\257\17\37\3\0\1\37\47\0\1\260\32\0\17\215"+
    "\1\261\53\215\17\0\1\262\127\0\1\263\16\0\5\221"+
    "\1\264\65\221\22\0\1\37\6\0\10\37\1\265\16\37"+
    "\3\0\1\37\3\0\1\266\44\0\1\266\25\0\1\266"+
    "\25\0\1\37\6\0\21\37\1\267\5\37\3\0\1\37"+
    "\4\0\1\270\54\0\1\270\15\0\1\270\24\0\1\37"+
    "\6\0\4\37\1\271\22\37\3\0\1\37\31\0\1\37"+
    "\6\0\21\37\1\272\5\37\3\0\1\37\4\0\1\273"+
    "\24\0\1\37\6\0\21\37\1\274\5\37\3\0\1\37"+
    "\4\0\1\275\54\0\1\275\15\0\1\275\24\0\1\37"+
    "\6\0\12\37\1\276\14\37\3\0\1\37\44\0\1\277"+
    "\57\0\1\37\6\0\22\37\1\300\4\37\3\0\1\37"+
    "\31\0\1\37\6\0\12\37\1\301\14\37\3\0\1\37"+
    "\31\0\1\37\6\0\12\37\1\302\14\37\3\0\1\37"+
    "\31\0\1\37\6\0\7\37\1\303\17\37\3\0\1\37"+
    "\31\0\1\37\6\0\21\37\1\304\5\37\3\0\1\37"+
    "\4\0\1\305\11\0\1\306\4\0\2\306\1\0\1\306"+
    "\1\0\1\306\73\0\1\37\6\0\20\37\1\307\6\37"+
    "\3\0\1\37\31\0\1\37\6\0\2\37\1\310\24\37"+
    "\3\0\1\37\31\0\1\37\6\0\12\37\1\311\14\37"+
    "\3\0\1\37\31\0\1\37\6\0\12\37\1\312\14\37"+
    "\3\0\1\37\31\0\1\37\6\0\23\37\1\313\3\37"+
    "\3\0\1\37\63\0\1\314\40\0\1\37\6\0\4\37"+
    "\1\315\22\37\3\0\1\37\7\0\17\215\1\261\46\215"+
    "\1\316\4\215\17\0\1\262\46\0\1\316\37\0\1\317"+
    "\44\0\1\320\107\0\1\37\6\0\22\37\1\321\4\37"+
    "\3\0\1\37\62\0\1\322\41\0\1\37\6\0\1\323"+
    "\26\37\3\0\1\37\31\0\1\37\6\0\4\37\1\324"+
    "\22\37\3\0\1\37\31\0\1\37\6\0\12\37\1\325"+
    "\14\37\3\0\1\37\31\0\1\37\6\0\4\37\1\326"+
    "\22\37\3\0\1\37\31\0\1\37\6\0\16\37\1\327"+
    "\10\37\3\0\1\37\56\0\1\330\45\0\1\37\6\0"+
    "\24\37\1\331\2\37\3\0\1\37\31\0\1\37\6\0"+
    "\22\37\1\332\4\37\3\0\1\37\31\0\1\37\6\0"+
    "\10\37\1\333\16\37\3\0\1\37\3\0\1\334\25\0"+
    "\1\37\6\0\10\37\1\335\16\37\3\0\1\37\3\0"+
    "\1\336\25\0\1\37\6\0\4\37\1\337\22\37\3\0"+
    "\1\37\44\0\1\340\110\0\1\341\24\0\1\143\107\0"+
    "\1\37\6\0\26\37\1\342\3\0\1\37\66\0\1\343"+
    "\35\0\1\37\6\0\14\37\1\344\12\37\3\0\1\37"+
    "\31\0\1\37\6\0\1\345\26\37\3\0\1\37\40\0"+
    "\1\346\63\0\1\37\6\0\10\37\1\347\16\37\3\0"+
    "\1\37\3\0\1\350\25\0\1\37\6\0\23\37\1\351"+
    "\3\37\3\0\1\37\31\0\1\37\6\0\14\37\1\352"+
    "\12\37\3\0\1\37\54\0\1\353\47\0\1\37\6\0"+
    "\14\37\1\354\12\37\3\0\1\37\54\0\1\355\101\0"+
    "\1\356\40\0\1\37\6\0\2\37\1\357\24\37\3\0"+
    "\1\37\42\0\1\360\61\0\1\37\6\0\21\37\1\361"+
    "\5\37\3\0\1\37\4\0\1\362\54\0\1\362\15\0"+
    "\1\362\24\0\1\37\6\0\20\37\1\363\6\37\3\0"+
    "\1\37\31\0\1\37\6\0\11\37\1\364\15\37\3\0"+
    "\1\37\5\0\1\365\43\0\1\365\26\0\1\365\23\0"+
    "\1\37\6\0\11\37\1\366\15\37\3\0\1\37\5\0"+
    "\1\367\43\0\1\367\26\0\1\367\52\0\1\370\43\0"+
    "\1\37\6\0\4\37\1\371\22\37\3\0\1\37\44\0"+
    "\1\372\57\0\1\37\6\0\4\37\1\373\22\37\3\0"+
    "\1\37\44\0\1\374\57\0\1\37\6\0\1\375\26\37"+
    "\3\0\1\37\40\0\1\376\63\0\1\37\6\0\12\37"+
    "\1\377\14\37\3\0\1\37\52\0\1\u0100\27\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10738];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\10\1\1\11\2\1\1\11\1\1\1\11"+
    "\7\1\1\11\21\1\1\11\1\1\1\11\3\1\1\11"+
    "\2\1\1\11\1\0\1\1\1\0\1\1\2\11\2\1"+
    "\1\0\1\1\1\11\33\1\1\0\2\1\2\0\1\1"+
    "\1\11\2\0\1\11\1\0\4\1\1\0\1\1\1\0"+
    "\3\1\1\0\3\1\1\0\23\1\1\0\1\1\1\11"+
    "\2\1\3\0\1\11\2\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\3\1\1\11\1\0\5\1\1\0\10\1"+
    "\1\0\2\1\1\11\4\0\1\1\1\0\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\5\1\1\0"+
    "\1\11\5\1\1\0\1\1\1\11\2\0\1\1\1\0"+
    "\5\1\1\0\3\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\1\1\1\11\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public UnisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return IDENTIFIER_TOKEN;
            }
          // fall through
          case 72: break;
          case 2:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 73: break;
          case 3:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 74: break;
          case 4:
            { return BANG;
            }
          // fall through
          case 75: break;
          case 5:
            { return MODS;
            }
          // fall through
          case 76: break;
          case 6:
            { return CIAPEK;
            }
          // fall through
          case 77: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 78: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 79: break;
          case 9:
            { return STAR;
            }
          // fall through
          case 80: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 81: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 82: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 83: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 84: break;
          case 14:
            { return DIV;
            }
          // fall through
          case 85: break;
          case 15:
            { return INT_TOKEN;
            }
          // fall through
          case 86: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 87: break;
          case 17:
            { return GT;
            }
          // fall through
          case 88: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 89: break;
          case 19:
            { return LT;
            }
          // fall through
          case 90: break;
          case 20:
            { return AT;
            }
          // fall through
          case 91: break;
          case 21:
            { return LPARENSQ;
            }
          // fall through
          case 92: break;
          case 22:
            { return LAMBDA;
            }
          // fall through
          case 93: break;
          case 23:
            { return RPARENSQ;
            }
          // fall through
          case 94: break;
          case 24:
            { return UNDERSCORE;
            }
          // fall through
          case 95: break;
          case 25:
            { return LBRACE;
            }
          // fall through
          case 96: break;
          case 26:
            { return BAR;
            }
          // fall through
          case 97: break;
          case 27:
            { return RBRACE;
            }
          // fall through
          case 98: break;
          case 28:
            { return FORALLSYMBOL;
            }
          // fall through
          case 99: break;
          case 29:
            { return STRING_TOKEN;
            }
          // fall through
          case 100: break;
          case 30:
            { return AND;
            }
          // fall through
          case 101: break;
          case 31:
            { return LBRACECIAPEK;
            }
          // fall through
          case 102: break;
          case 32:
            { return EMPTYBRACES;
            }
          // fall through
          case 103: break;
          case 33:
            { return COMMENT;
            }
          // fall through
          case 104: break;
          case 34:
            { return ARROW;
            }
          // fall through
          case 105: break;
          case 35:
            { return CHAR_TOKEN;
            }
          // fall through
          case 106: break;
          case 36:
            { return DO;
            }
          // fall through
          case 107: break;
          case 37:
            { return IF;
            }
          // fall through
          case 108: break;
          case 38:
            { return OR;
            }
          // fall through
          case 109: break;
          case 39:
            { return DOUBLE_TOKEN;
            }
          // fall through
          case 110: break;
          case 40:
            { return EQ3;
            }
          // fall through
          case 111: break;
          case 41:
            { return INT;
            }
          // fall through
          case 112: break;
          case 42:
            { return LET;
            }
          // fall through
          case 113: break;
          case 43:
            { return MODW;
            }
          // fall through
          case 114: break;
          case 44:
            { return NAT;
            }
          // fall through
          case 115: break;
          case 45:
            { return NOT;
            }
          // fall through
          case 116: break;
          case 46:
            { return USE;
            }
          // fall through
          case 117: break;
          case 47:
            { return CHAR;
            }
          // fall through
          case 118: break;
          case 48:
            { return ELSE;
            }
          // fall through
          case 119: break;
          case 49:
            { return TEXT;
            }
          // fall through
          case 120: break;
          case 50:
            { return THEN;
            }
          // fall through
          case 121: break;
          case 51:
            { return BOOLEAN_TOKEN;
            }
          // fall through
          case 122: break;
          case 52:
            { return TYPE;
            }
          // fall through
          case 123: break;
          case 53:
            { return WITH;
            }
          // fall through
          case 124: break;
          case 54:
            { return ALIAS;
            }
          // fall through
          case 125: break;
          case 55:
            { return BYTES;
            }
          // fall through
          case 126: break;
          case 56:
            { return CASES;
            }
          // fall through
          case 127: break;
          case 57:
            { return FLOAT;
            }
          // fall through
          case 128: break;
          case 58:
            { return MATCH;
            }
          // fall through
          case 129: break;
          case 59:
            { return NUM_OPERATOR_TOKEN;
            }
          // fall through
          case 130: break;
          case 60:
            { return WHERE;
            }
          // fall through
          case 131: break;
          case 61:
            { return DOUBLE;
            }
          // fall through
          case 132: break;
          case 62:
            { return FORALL;
            }
          // fall through
          case 133: break;
          case 63:
            { return HANDLE;
            }
          // fall through
          case 134: break;
          case 64:
            { return UNIQUE;
            }
          // fall through
          case 135: break;
          case 65:
            { return ABILITY;
            }
          // fall through
          case 136: break;
          case 66:
            { return BOOLEAN;
            }
          // fall through
          case 137: break;
          case 67:
            { return TERMLINK;
            }
          // fall through
          case 138: break;
          case 68:
            { return TYPELINK;
            }
          // fall through
          case 139: break;
          case 69:
            { return NAMESPACE;
            }
          // fall through
          case 140: break;
          case 70:
            { return OTHERWISE;
            }
          // fall through
          case 141: break;
          case 71:
            { return STRUCTURAL;
            }
          // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
