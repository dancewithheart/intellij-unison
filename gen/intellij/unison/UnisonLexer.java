// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Unison.flex

/* Unison lexer specification */
/* ===================== User Code =================== */
package intellij.unison;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.unison.language.psi.UnisonTypes.*;


public class UnisonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\1\u0500\265\u0200\10\u0600"+
    "\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23"+
    "\1\24\1\0\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\40\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\40\1\56\1\57\1\60"+
    "\1\40\1\61\1\62\1\63\1\6\1\64\1\0\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\73\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\73\1\111\1\112\1\113"+
    "\1\73\1\114\1\115\1\116\1\6\6\0\1\3\252\0"+
    "\2\117\115\0\1\120\u01a8\0\2\3\u0100\0\1\121\325\0"+
    "\1\122\377\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\2\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\21\1\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\2\1\34\1\0\1\35\1\0\1\36\1\37\1\40"+
    "\1\41\1\42\2\0\1\1\1\43\6\1\1\44\5\1"+
    "\1\45\16\1\1\0\2\1\2\0\1\46\1\45\2\0"+
    "\1\35\1\0\1\35\1\47\1\0\1\50\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\3\1\1\0\4\1\1\51"+
    "\1\52\1\1\1\53\1\1\1\54\1\55\10\1\1\0"+
    "\2\56\2\1\3\0\1\51\2\0\1\57\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\60\1\1\2\61\1\0"+
    "\5\1\1\0\3\1\1\62\1\63\1\64\1\65\1\1"+
    "\1\0\1\1\2\66\4\0\1\1\1\0\2\67\1\1"+
    "\2\70\2\71\1\1\1\64\1\72\2\1\1\73\1\1"+
    "\1\0\1\74\5\1\1\0\1\75\1\41\2\0\1\1"+
    "\1\0\1\1\1\76\1\77\1\100\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\2\101\1\0\2\102\1\103\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\104\2\105\1\0\2\106"+
    "\2\107\1\1\1\0\2\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\371\0\371\0\u019f"+
    "\0\u01f2\0\u0245\0\123\0\371\0\u0298\0\123\0\u02eb\0\123"+
    "\0\371\0\u033e\0\u0391\0\371\0\371\0\u03e4\0\371\0\u0437"+
    "\0\123\0\u048a\0\u04dd\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c"+
    "\0\u06cf\0\u0722\0\u0775\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914"+
    "\0\u0967\0\u09ba\0\123\0\371\0\123\0\u067c\0\u0a0d\0\u0a60"+
    "\0\123\0\u0ab3\0\u0b06\0\123\0\u0b59\0\u0bac\0\u0bff\0\371"+
    "\0\123\0\123\0\u0c52\0\371\0\u0ca5\0\u0cf8\0\u0d4b\0\123"+
    "\0\u0d9e\0\u0df1\0\u0e44\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3"+
    "\0\u1036\0\u1089\0\u10dc\0\u112f\0\u067c\0\u1182\0\u11d5\0\u1228"+
    "\0\u127b\0\u12ce\0\u1321\0\u1374\0\u13c7\0\u141a\0\u146d\0\u14c0"+
    "\0\u1513\0\u1566\0\u15b9\0\u160c\0\u165f\0\u16b2\0\u1705\0\u1758"+
    "\0\371\0\123\0\u17ab\0\u17fe\0\123\0\u1851\0\u0b59\0\u0ca5"+
    "\0\u18a4\0\371\0\u18f7\0\u194a\0\u199d\0\u19f0\0\u1a43\0\u1a96"+
    "\0\u1ae9\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e"+
    "\0\u1d81\0\u1dd4\0\u067c\0\u067c\0\u1e27\0\u067c\0\u1e7a\0\u1ecd"+
    "\0\u067c\0\u1f20\0\u1f73\0\u1fc6\0\u2019\0\u206c\0\u20bf\0\u2112"+
    "\0\u2165\0\u21b8\0\u067c\0\123\0\u220b\0\u225e\0\u22b1\0\u2304"+
    "\0\u2357\0\123\0\u23aa\0\u23fd\0\u18a4\0\u2450\0\u24a3\0\u24f6"+
    "\0\u2549\0\u259c\0\u25ef\0\u2642\0\u2695\0\u067c\0\u26e8\0\u067c"+
    "\0\123\0\u273b\0\u278e\0\u27e1\0\u2834\0\u2887\0\u28da\0\u292d"+
    "\0\u2980\0\u29d3\0\u2a26\0\u067c\0\u067c\0\u067c\0\u2a79\0\u2acc"+
    "\0\u2b1f\0\u2b72\0\u067c\0\123\0\u2bc5\0\u2c18\0\u2c6b\0\u2cbe"+
    "\0\u2d11\0\u2d64\0\u067c\0\123\0\u2db7\0\u067c\0\123\0\u067c"+
    "\0\123\0\u2e0a\0\123\0\u067c\0\u2e5d\0\u2eb0\0\u067c\0\u2f03"+
    "\0\u2f56\0\123\0\u2fa9\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u3148"+
    "\0\u067c\0\123\0\u319b\0\u31ee\0\u3241\0\u3294\0\u32e7\0\u067c"+
    "\0\u067c\0\u067c\0\u333a\0\u338d\0\u33e0\0\u3433\0\u3486\0\u34d9"+
    "\0\u352c\0\u357f\0\u067c\0\123\0\u35d2\0\u067c\0\123\0\u067c"+
    "\0\u3625\0\u3678\0\u36cb\0\u371e\0\u3771\0\u37c4\0\u3817\0\u386a"+
    "\0\u38bd\0\u3910\0\u3963\0\u39b6\0\u3a09\0\u3a5c\0\u3aaf\0\u067c"+
    "\0\123\0\u067c\0\123\0\u3b02\0\u067c\0\123\0\u067c\0\123"+
    "\0\u3b55\0\u3ba8\0\u067c\0\123";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\40\1\43\1\44\1\45\1\46\3\40"+
    "\1\47\1\50\1\51\1\52\2\40\1\53\1\54\1\55"+
    "\1\56\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\40\1\43\1\44\1\45\1\46\3\40"+
    "\1\47\1\50\1\51\1\52\2\40\1\57\1\60\1\61"+
    "\1\62\1\63\1\2\1\64\124\0\2\3\124\0\1\6"+
    "\1\0\3\6\3\0\2\6\1\0\1\6\1\0\1\6"+
    "\2\0\4\6\32\0\1\6\32\0\1\6\5\0\2\65"+
    "\1\0\2\65\1\66\54\65\1\67\40\65\4\0\1\6"+
    "\1\0\2\6\1\70\3\0\2\6\1\0\1\6\1\0"+
    "\1\6\2\0\4\6\32\0\1\6\32\0\1\6\121\0"+
    "\1\71\21\0\1\72\113\0\1\6\1\0\3\6\3\0"+
    "\2\6\1\0\1\6\1\0\1\6\2\23\4\6\32\0"+
    "\1\6\32\0\1\6\11\0\1\6\1\0\3\6\3\0"+
    "\2\6\1\0\1\73\1\0\1\6\2\23\3\6\1\74"+
    "\32\0\1\6\32\0\1\6\25\0\1\75\1\0\2\23"+
    "\33\0\1\76\32\0\1\76\30\0\1\75\1\0\2\23"+
    "\103\0\1\6\1\0\3\6\3\0\2\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\77\1\6\32\0\1\6"+
    "\32\0\1\6\5\0\2\100\2\0\117\100\22\0\2\40"+
    "\6\0\1\40\1\101\10\40\1\102\14\40\3\0\2\40"+
    "\1\101\10\40\1\102\14\40\31\0\2\40\6\0\15\40"+
    "\1\103\10\40\1\104\3\0\16\40\1\103\10\40\1\104"+
    "\31\0\2\40\6\0\1\105\6\40\1\106\17\40\3\0"+
    "\1\40\1\105\6\40\1\106\17\40\31\0\2\40\6\0"+
    "\15\40\1\107\11\40\3\0\16\40\1\107\11\40\31\0"+
    "\2\40\6\0\12\40\1\110\14\40\3\0\13\40\1\110"+
    "\14\40\31\0\2\40\6\0\1\111\11\40\1\112\2\40"+
    "\1\113\11\40\3\0\1\40\1\111\11\40\1\112\2\40"+
    "\1\113\11\40\31\0\2\40\6\0\27\40\3\0\30\40"+
    "\31\0\2\40\6\0\1\114\26\40\3\0\1\40\1\114"+
    "\26\40\31\0\2\40\6\0\5\40\1\115\6\40\1\116"+
    "\12\40\3\0\6\40\1\115\6\40\1\116\12\40\31\0"+
    "\2\40\6\0\4\40\1\117\22\40\3\0\5\40\1\117"+
    "\22\40\31\0\2\40\6\0\1\120\14\40\1\121\11\40"+
    "\3\0\1\40\1\120\14\40\1\121\11\40\31\0\2\40"+
    "\6\0\1\122\14\40\1\123\11\40\3\0\1\40\1\122"+
    "\14\40\1\123\11\40\31\0\2\40\6\0\22\40\1\124"+
    "\4\40\3\0\23\40\1\124\4\40\31\0\2\40\6\0"+
    "\22\40\1\125\4\40\3\0\23\40\1\125\4\40\31\0"+
    "\2\40\6\0\4\40\1\126\2\40\1\127\10\40\1\130"+
    "\5\40\1\131\3\0\5\40\1\126\2\40\1\127\10\40"+
    "\1\130\5\40\1\131\31\0\2\40\6\0\14\40\1\132"+
    "\4\40\1\133\5\40\3\0\15\40\1\132\4\40\1\133"+
    "\5\40\4\0\1\134\24\0\2\40\6\0\7\40\1\135"+
    "\1\136\16\40\3\0\10\40\1\135\1\136\16\40\3\0"+
    "\1\137\22\0\1\140\107\0\1\6\1\0\3\6\3\0"+
    "\2\6\1\0\1\6\1\0\1\6\2\0\4\6\32\0"+
    "\1\6\32\0\1\141\44\0\1\142\6\0\1\143\23\0"+
    "\1\142\6\0\1\143\75\0\1\144\32\0\1\144\13\0"+
    "\2\65\1\0\2\65\1\145\54\65\1\67\40\65\5\0"+
    "\1\146\115\0\2\65\1\0\2\65\1\147\54\65\1\67"+
    "\40\65\2\73\1\0\120\73\22\0\2\150\152\0\1\151"+
    "\32\0\1\151\11\0\1\151\6\0\1\6\1\0\3\6"+
    "\3\0\2\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\152\1\6\32\0\1\6\32\0\1\6\27\0\2\40"+
    "\6\0\10\40\1\153\16\40\3\0\11\40\1\153\16\40"+
    "\3\0\1\154\25\0\2\40\6\0\10\40\1\155\16\40"+
    "\3\0\11\40\1\155\16\40\3\0\1\156\25\0\2\40"+
    "\6\0\15\40\1\157\11\40\3\0\16\40\1\157\11\40"+
    "\31\0\2\40\6\0\22\40\1\160\4\40\3\0\23\40"+
    "\1\160\4\40\31\0\2\40\6\0\21\40\1\161\5\40"+
    "\3\0\22\40\1\161\5\40\4\0\1\162\24\0\2\40"+
    "\6\0\1\163\26\40\3\0\1\40\1\163\26\40\31\0"+
    "\2\40\6\0\23\40\1\164\3\40\3\0\24\40\1\164"+
    "\3\40\31\0\2\40\6\0\21\40\1\165\5\40\3\0"+
    "\22\40\1\165\5\40\4\0\1\166\24\0\2\40\6\0"+
    "\12\40\1\167\14\40\3\0\13\40\1\167\14\40\31\0"+
    "\2\40\6\0\15\40\1\170\11\40\3\0\16\40\1\170"+
    "\11\40\31\0\2\40\6\0\20\40\1\171\6\40\3\0"+
    "\21\40\1\171\6\40\31\0\2\40\6\0\14\40\1\172"+
    "\12\40\3\0\15\40\1\172\12\40\31\0\2\40\6\0"+
    "\22\40\1\173\4\40\3\0\23\40\1\173\4\40\31\0"+
    "\2\40\6\0\22\40\1\174\4\40\3\0\23\40\1\174"+
    "\4\40\31\0\2\40\6\0\22\40\1\175\4\40\3\0"+
    "\23\40\1\175\4\40\31\0\2\40\6\0\3\40\1\176"+
    "\23\40\3\0\4\40\1\176\23\40\31\0\2\40\6\0"+
    "\13\40\1\177\6\40\1\200\4\40\3\0\14\40\1\177"+
    "\6\40\1\200\4\40\31\0\2\40\6\0\22\40\1\201"+
    "\4\40\3\0\23\40\1\201\4\40\31\0\2\40\6\0"+
    "\7\40\1\202\17\40\3\0\10\40\1\202\17\40\31\0"+
    "\2\40\6\0\20\40\1\203\6\40\3\0\21\40\1\203"+
    "\6\40\31\0\2\40\6\0\20\40\1\204\4\40\1\205"+
    "\1\40\3\0\21\40\1\204\4\40\1\205\1\40\31\0"+
    "\2\40\6\0\4\40\1\206\22\40\3\0\5\40\1\206"+
    "\22\40\31\0\2\40\6\0\23\40\1\207\3\40\3\0"+
    "\24\40\1\207\3\40\31\0\2\40\6\0\16\40\1\210"+
    "\10\40\3\0\17\40\1\210\10\40\31\0\2\40\6\0"+
    "\10\40\1\211\16\40\3\0\11\40\1\211\16\40\3\0"+
    "\1\212\25\0\2\40\6\0\4\40\1\213\22\40\3\0"+
    "\5\40\1\213\22\40\45\0\1\214\32\0\1\214\53\0"+
    "\2\40\6\0\4\40\1\215\22\40\3\0\5\40\1\215"+
    "\22\40\31\0\2\40\6\0\22\40\1\216\4\40\3\0"+
    "\23\40\1\216\4\40\63\0\1\217\32\0\1\217\13\0"+
    "\17\220\1\221\103\220\54\0\1\222\32\0\1\222\65\0"+
    "\1\223\32\0\1\223\15\0\5\224\1\0\115\224\22\0"+
    "\2\225\41\0\27\225\31\0\2\40\6\0\12\40\1\226"+
    "\14\40\3\0\13\40\1\226\14\40\53\0\1\227\32\0"+
    "\1\227\45\0\2\40\6\0\1\230\26\40\3\0\1\40"+
    "\1\230\26\40\41\0\1\231\32\0\1\231\57\0\2\40"+
    "\6\0\12\40\1\232\14\40\3\0\13\40\1\232\14\40"+
    "\31\0\2\40\6\0\4\40\1\233\22\40\3\0\5\40"+
    "\1\233\22\40\31\0\2\40\6\0\4\40\1\234\22\40"+
    "\3\0\5\40\1\234\22\40\45\0\1\235\32\0\1\235"+
    "\53\0\2\40\6\0\20\40\1\236\6\40\3\0\21\40"+
    "\1\236\6\40\31\0\2\40\6\0\1\40\1\237\25\40"+
    "\3\0\2\40\1\237\25\40\31\0\2\40\6\0\4\40"+
    "\1\240\22\40\3\0\5\40\1\240\22\40\45\0\1\241"+
    "\32\0\1\241\53\0\2\40\6\0\21\40\1\207\5\40"+
    "\3\0\22\40\1\207\5\40\4\0\1\242\24\0\2\40"+
    "\6\0\1\243\26\40\3\0\1\40\1\243\26\40\31\0"+
    "\2\40\6\0\1\244\26\40\3\0\1\40\1\244\26\40"+
    "\31\0\2\40\6\0\3\40\1\245\23\40\3\0\4\40"+
    "\1\245\23\40\31\0\2\40\6\0\2\40\1\246\24\40"+
    "\3\0\3\40\1\246\24\40\31\0\2\40\6\0\4\40"+
    "\1\247\22\40\3\0\5\40\1\247\22\40\27\0\1\250"+
    "\1\0\2\40\6\0\27\40\3\0\30\40\31\0\2\40"+
    "\6\0\4\40\1\251\22\40\3\0\5\40\1\251\22\40"+
    "\31\0\2\40\6\0\23\40\1\252\3\40\3\0\24\40"+
    "\1\252\3\40\31\0\2\40\6\0\13\40\1\253\13\40"+
    "\3\0\14\40\1\253\13\40\31\0\2\40\6\0\22\40"+
    "\1\254\4\40\3\0\23\40\1\254\4\40\31\0\2\40"+
    "\6\0\14\40\1\255\12\40\3\0\15\40\1\255\12\40"+
    "\31\0\2\40\6\0\4\40\1\256\22\40\3\0\5\40"+
    "\1\256\22\40\31\0\2\40\6\0\4\40\1\257\22\40"+
    "\3\0\5\40\1\257\22\40\31\0\2\40\6\0\17\40"+
    "\1\260\7\40\3\0\20\40\1\260\7\40\60\0\1\261"+
    "\32\0\1\261\40\0\2\40\6\0\20\40\1\262\6\40"+
    "\3\0\21\40\1\262\6\40\31\0\2\40\6\0\7\40"+
    "\1\263\17\40\3\0\10\40\1\263\17\40\50\0\1\264"+
    "\32\0\1\264\26\0\17\220\1\265\103\220\17\0\1\266"+
    "\160\0\1\267\32\0\1\267\12\0\5\224\1\270\115\224"+
    "\22\0\2\40\6\0\10\40\1\271\16\40\3\0\11\40"+
    "\1\271\16\40\3\0\1\272\45\0\1\272\32\0\1\272"+
    "\21\0\1\272\25\0\2\40\6\0\21\40\1\273\5\40"+
    "\3\0\22\40\1\273\5\40\4\0\1\274\55\0\1\274"+
    "\32\0\1\274\11\0\1\274\24\0\2\40\6\0\4\40"+
    "\1\275\22\40\3\0\5\40\1\275\22\40\31\0\2\40"+
    "\6\0\21\40\1\276\5\40\3\0\22\40\1\276\5\40"+
    "\4\0\1\277\24\0\2\40\6\0\21\40\1\300\5\40"+
    "\3\0\22\40\1\300\5\40\4\0\1\301\55\0\1\301"+
    "\32\0\1\301\11\0\1\301\24\0\2\40\6\0\12\40"+
    "\1\302\14\40\3\0\13\40\1\302\14\40\45\0\1\303"+
    "\32\0\1\303\53\0\2\40\6\0\22\40\1\304\4\40"+
    "\3\0\23\40\1\304\4\40\31\0\2\40\6\0\12\40"+
    "\1\305\14\40\3\0\13\40\1\305\14\40\31\0\2\40"+
    "\6\0\12\40\1\306\14\40\3\0\13\40\1\306\14\40"+
    "\31\0\2\40\6\0\7\40\1\307\17\40\3\0\10\40"+
    "\1\307\17\40\31\0\2\40\6\0\21\40\1\310\5\40"+
    "\3\0\22\40\1\310\5\40\4\0\1\311\11\0\1\312"+
    "\4\0\2\312\1\0\1\312\1\0\1\312\123\0\2\40"+
    "\6\0\20\40\1\313\6\40\3\0\21\40\1\313\6\40"+
    "\31\0\2\40\6\0\2\40\1\314\24\40\3\0\3\40"+
    "\1\314\24\40\31\0\2\40\6\0\12\40\1\315\14\40"+
    "\3\0\13\40\1\315\14\40\31\0\2\40\6\0\12\40"+
    "\1\316\14\40\3\0\13\40\1\316\14\40\31\0\2\40"+
    "\6\0\23\40\1\317\3\40\3\0\24\40\1\317\3\40"+
    "\64\0\1\320\32\0\1\320\34\0\2\40\6\0\4\40"+
    "\1\321\22\40\3\0\5\40\1\321\22\40\7\0\17\220"+
    "\1\265\76\220\1\322\4\220\17\0\1\266\76\0\1\322"+
    "\40\0\1\323\32\0\1\323\40\0\1\324\137\0\2\40"+
    "\6\0\22\40\1\325\4\40\3\0\23\40\1\325\4\40"+
    "\63\0\1\326\32\0\1\326\35\0\2\40\6\0\1\327"+
    "\26\40\3\0\1\40\1\327\26\40\31\0\2\40\6\0"+
    "\4\40\1\330\22\40\3\0\5\40\1\330\22\40\31\0"+
    "\2\40\6\0\12\40\1\331\14\40\3\0\13\40\1\331"+
    "\14\40\31\0\2\40\6\0\4\40\1\332\22\40\3\0"+
    "\5\40\1\332\22\40\31\0\2\40\6\0\16\40\1\333"+
    "\10\40\3\0\17\40\1\333\10\40\57\0\1\334\32\0"+
    "\1\334\41\0\2\40\6\0\24\40\1\335\2\40\3\0"+
    "\25\40\1\335\2\40\31\0\2\40\6\0\22\40\1\336"+
    "\4\40\3\0\23\40\1\336\4\40\31\0\2\40\6\0"+
    "\10\40\1\337\16\40\3\0\11\40\1\337\16\40\3\0"+
    "\1\340\25\0\2\40\6\0\10\40\1\341\16\40\3\0"+
    "\11\40\1\341\16\40\3\0\1\342\25\0\2\40\6\0"+
    "\4\40\1\343\22\40\3\0\5\40\1\343\22\40\45\0"+
    "\1\344\32\0\1\344\105\0\1\345\32\0\1\345\20\0"+
    "\1\145\137\0\2\40\6\0\26\40\1\346\3\0\27\40"+
    "\1\346\67\0\1\347\32\0\1\347\31\0\2\40\6\0"+
    "\14\40\1\350\12\40\3\0\15\40\1\350\12\40\31\0"+
    "\2\40\6\0\1\351\26\40\3\0\1\40\1\351\26\40"+
    "\41\0\1\352\32\0\1\352\57\0\2\40\6\0\10\40"+
    "\1\353\16\40\3\0\11\40\1\353\16\40\3\0\1\354"+
    "\25\0\2\40\6\0\23\40\1\355\3\40\3\0\24\40"+
    "\1\355\3\40\31\0\2\40\6\0\14\40\1\356\12\40"+
    "\3\0\15\40\1\356\12\40\55\0\1\357\32\0\1\357"+
    "\43\0\2\40\6\0\14\40\1\360\12\40\3\0\15\40"+
    "\1\360\12\40\55\0\1\361\32\0\1\361\76\0\1\362"+
    "\32\0\1\362\34\0\2\40\6\0\2\40\1\363\24\40"+
    "\3\0\3\40\1\363\24\40\43\0\1\364\32\0\1\364"+
    "\55\0\2\40\6\0\21\40\1\365\5\40\3\0\22\40"+
    "\1\365\5\40\4\0\1\366\55\0\1\366\32\0\1\366"+
    "\11\0\1\366\24\0\2\40\6\0\20\40\1\367\6\40"+
    "\3\0\21\40\1\367\6\40\31\0\2\40\6\0\11\40"+
    "\1\370\15\40\3\0\12\40\1\370\15\40\5\0\1\371"+
    "\44\0\1\371\32\0\1\371\22\0\1\371\23\0\2\40"+
    "\6\0\11\40\1\372\15\40\3\0\12\40\1\372\15\40"+
    "\5\0\1\373\44\0\1\373\32\0\1\373\22\0\1\373"+
    "\53\0\1\374\32\0\1\374\37\0\2\40\6\0\4\40"+
    "\1\375\22\40\3\0\5\40\1\375\22\40\45\0\1\376"+
    "\32\0\1\376\53\0\2\40\6\0\4\40\1\377\22\40"+
    "\3\0\5\40\1\377\22\40\45\0\1\u0100\32\0\1\u0100"+
    "\53\0\2\40\6\0\1\u0101\26\40\3\0\1\40\1\u0101"+
    "\26\40\41\0\1\u0102\32\0\1\u0102\57\0\2\40\6\0"+
    "\12\40\1\u0103\14\40\3\0\13\40\1\u0103\14\40\53\0"+
    "\1\u0104\32\0\1\u0104\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15355];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\10\1\1\11\2\1\1\11\1\1\1\11"+
    "\10\1\1\11\21\1\1\11\1\1\1\11\3\1\1\11"+
    "\2\1\1\11\1\0\1\1\1\0\1\1\2\11\2\1"+
    "\2\0\1\1\1\11\33\1\1\0\2\1\2\0\1\1"+
    "\1\11\2\0\1\11\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\3\1\1\0\3\1\1\0\23\1\1\0"+
    "\1\1\1\11\2\1\3\0\1\11\2\0\2\1\1\0"+
    "\1\1\1\0\3\1\1\0\3\1\1\11\1\0\5\1"+
    "\1\0\10\1\1\0\2\1\1\11\4\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\5\1\1\0\1\11\5\1\1\0\1\1\1\11\2\0"+
    "\1\1\1\0\5\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\11\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\11\1\1\1\11\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public UnisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return IDENTIFIER_TOKEN;
            }
          // fall through
          case 73: break;
          case 2:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 74: break;
          case 3:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 75: break;
          case 4:
            { return BANG;
            }
          // fall through
          case 76: break;
          case 5:
            { return MODS;
            }
          // fall through
          case 77: break;
          case 6:
            { return CIAPEK;
            }
          // fall through
          case 78: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 79: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 80: break;
          case 9:
            { return STAR;
            }
          // fall through
          case 81: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 82: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 83: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 84: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 85: break;
          case 14:
            { return DIV;
            }
          // fall through
          case 86: break;
          case 15:
            { return INT_TOKEN;
            }
          // fall through
          case 87: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 88: break;
          case 17:
            { return GT;
            }
          // fall through
          case 89: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 90: break;
          case 19:
            { return LT;
            }
          // fall through
          case 91: break;
          case 20:
            { return AT;
            }
          // fall through
          case 92: break;
          case 21:
            { return LPARENSQ;
            }
          // fall through
          case 93: break;
          case 22:
            { return LAMBDA;
            }
          // fall through
          case 94: break;
          case 23:
            { return RPARENSQ;
            }
          // fall through
          case 95: break;
          case 24:
            { return UNDERSCORE;
            }
          // fall through
          case 96: break;
          case 25:
            { return LBRACE;
            }
          // fall through
          case 97: break;
          case 26:
            { return BAR;
            }
          // fall through
          case 98: break;
          case 27:
            { return RBRACE;
            }
          // fall through
          case 99: break;
          case 28:
            { return FORALLSYMBOL;
            }
          // fall through
          case 100: break;
          case 29:
            { return STRING_TOKEN;
            }
          // fall through
          case 101: break;
          case 30:
            { return AND;
            }
          // fall through
          case 102: break;
          case 31:
            { return LBRACECIAPEK;
            }
          // fall through
          case 103: break;
          case 32:
            { return EMPTYBRACES;
            }
          // fall through
          case 104: break;
          case 33:
            { return COMMENT;
            }
          // fall through
          case 105: break;
          case 34:
            { return ARROW;
            }
          // fall through
          case 106: break;
          case 35:
            { return CHAR_TOKEN;
            }
          // fall through
          case 107: break;
          case 36:
            { return DO;
            }
          // fall through
          case 108: break;
          case 37:
            { return IF;
            }
          // fall through
          case 109: break;
          case 38:
            { return OR;
            }
          // fall through
          case 110: break;
          case 39:
            { return DOUBLE_TOKEN;
            }
          // fall through
          case 111: break;
          case 40:
            { return EQ3;
            }
          // fall through
          case 112: break;
          case 41:
            { return INT;
            }
          // fall through
          case 113: break;
          case 42:
            { return LET;
            }
          // fall through
          case 114: break;
          case 43:
            { return MODW;
            }
          // fall through
          case 115: break;
          case 44:
            { return NAT;
            }
          // fall through
          case 116: break;
          case 45:
            { return NOT;
            }
          // fall through
          case 117: break;
          case 46:
            { return USE;
            }
          // fall through
          case 118: break;
          case 47:
            { return BYTES_TOKEN;
            }
          // fall through
          case 119: break;
          case 48:
            { return CHAR;
            }
          // fall through
          case 120: break;
          case 49:
            { return ELSE;
            }
          // fall through
          case 121: break;
          case 50:
            { return TEXT;
            }
          // fall through
          case 122: break;
          case 51:
            { return THEN;
            }
          // fall through
          case 123: break;
          case 52:
            { return BOOLEAN_TOKEN;
            }
          // fall through
          case 124: break;
          case 53:
            { return TYPE;
            }
          // fall through
          case 125: break;
          case 54:
            { return WITH;
            }
          // fall through
          case 126: break;
          case 55:
            { return ALIAS;
            }
          // fall through
          case 127: break;
          case 56:
            { return BYTES;
            }
          // fall through
          case 128: break;
          case 57:
            { return CASES;
            }
          // fall through
          case 129: break;
          case 58:
            { return FLOAT;
            }
          // fall through
          case 130: break;
          case 59:
            { return MATCH;
            }
          // fall through
          case 131: break;
          case 60:
            { return NUM_OPERATOR_TOKEN;
            }
          // fall through
          case 132: break;
          case 61:
            { return WHERE;
            }
          // fall through
          case 133: break;
          case 62:
            { return DOUBLE;
            }
          // fall through
          case 134: break;
          case 63:
            { return FORALL;
            }
          // fall through
          case 135: break;
          case 64:
            { return HANDLE;
            }
          // fall through
          case 136: break;
          case 65:
            { return UNIQUE;
            }
          // fall through
          case 137: break;
          case 66:
            { return ABILITY;
            }
          // fall through
          case 138: break;
          case 67:
            { return BOOLEAN;
            }
          // fall through
          case 139: break;
          case 68:
            { return TERMLINK;
            }
          // fall through
          case 140: break;
          case 69:
            { return TYPELINK;
            }
          // fall through
          case 141: break;
          case 70:
            { return NAMESPACE;
            }
          // fall through
          case 142: break;
          case 71:
            { return OTHERWISE;
            }
          // fall through
          case 143: break;
          case 72:
            { return STRUCTURAL;
            }
          // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
