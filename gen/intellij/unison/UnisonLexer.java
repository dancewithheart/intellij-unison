// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Unison.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
/* Unison lexer specification */
/* ===================== User Code =================== */
package intellij.unison;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.unison.language.psi.UnisonTypes.*;


public class UnisonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\3\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\11\21\1\22\2\0"+
    "\1\23\1\24\2\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\33\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\33"+
    "\1\50\1\33\1\51\1\33\1\0\1\52\2\0\1\53"+
    "\1\0\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\33\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\33\1\50\1\33"+
    "\1\51\1\33\1\54\1\55\1\56\7\0\1\3\252\0"+
    "\2\57\115\0\1\60\u01a8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\17\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\1\1\0\1\27\1\0\1\30\1\0\1\31\1\32"+
    "\2\0\2\21\1\33\2\21\1\34\14\21\1\0\2\21"+
    "\2\0\1\35\1\34\1\0\1\36\1\15\1\37\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\40\1\21"+
    "\1\41\1\21\1\42\6\21\1\0\2\43\2\21\4\0"+
    "\1\21\1\0\1\21\1\0\2\44\1\0\4\21\1\45"+
    "\1\46\1\47\1\21\1\0\1\21\2\50\3\0\1\21"+
    "\1\0\2\51\1\46\1\52\1\21\1\0\3\21\1\0"+
    "\1\53\1\31\1\0\1\21\1\0\1\21\1\0\2\21"+
    "\2\54\1\0\2\55\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\2\56"+
    "\2\57\1\21\1\0\2\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\223\0\304\0\365\0\61"+
    "\0\61\0\61\0\61\0\61\0\u0126\0\61\0\61\0\u0157"+
    "\0\u0188\0\61\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\61\0\u021b\0\u04c9\0\u04fa\0\61\0\u052b"+
    "\0\u055c\0\223\0\61\0\u058d\0\61\0\u05be\0\u05ef\0\61"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u021b\0\u06e4\0\u0715\0\u021b"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\61\0\61\0\u0a87\0\61\0\u0620\0\61\0\u0ab8"+
    "\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u021b\0\u0c0f"+
    "\0\u021b\0\u0c40\0\u021b\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u021b\0\61\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u021b\0\61"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u021b\0\u021b\0\u021b"+
    "\0\u10a7\0\u10d8\0\u1109\0\u021b\0\61\0\u113a\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\u021b\0\61\0\61\0\u021b\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u021b\0\61\0\u1355\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u021b\0\61\0\u14ac"+
    "\0\u021b\0\61\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2"+
    "\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u021b\0\61"+
    "\0\u021b\0\61\0\u1729\0\u175a\0\u021b\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\2\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\2\25\1\32\1\33\1\34\1\35\1\36"+
    "\3\25\1\37\1\40\1\41\1\42\1\25\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\62\0\2\3\56\0"+
    "\5\52\1\53\44\52\1\54\6\52\6\0\1\55\52\0"+
    "\7\56\1\0\51\56\15\0\1\57\6\0\1\60\52\0"+
    "\1\61\1\0\2\20\55\0\1\61\1\0\2\21\62\0"+
    "\1\62\55\0\2\25\3\0\1\25\1\63\23\25\1\0"+
    "\1\25\25\0\2\25\3\0\25\25\1\0\1\25\25\0"+
    "\2\25\3\0\1\64\24\25\1\0\1\25\25\0\2\25"+
    "\3\0\14\25\1\65\10\25\1\0\1\25\25\0\2\25"+
    "\3\0\11\25\1\66\13\25\1\0\1\25\25\0\2\25"+
    "\3\0\1\67\24\25\1\0\1\25\25\0\2\25\3\0"+
    "\5\25\1\70\17\25\1\0\1\25\25\0\2\25\3\0"+
    "\4\25\1\71\20\25\1\0\1\25\25\0\2\25\3\0"+
    "\1\72\13\25\1\73\10\25\1\0\1\25\25\0\2\25"+
    "\3\0\1\74\13\25\1\75\10\25\1\0\1\25\25\0"+
    "\2\25\3\0\21\25\1\76\3\25\1\0\1\25\25\0"+
    "\2\25\3\0\21\25\1\77\3\25\1\0\1\25\25\0"+
    "\2\25\3\0\7\25\1\100\7\25\1\101\4\25\1\102"+
    "\1\0\1\25\25\0\2\25\3\0\13\25\1\103\4\25"+
    "\1\104\4\25\1\0\1\25\4\0\1\105\20\0\2\25"+
    "\3\0\7\25\1\106\1\107\14\25\1\0\1\25\3\0"+
    "\1\110\16\0\1\111\120\0\1\112\35\0\1\113\74\0"+
    "\1\114\12\0\2\52\2\0\55\52\7\0\1\115\51\0"+
    "\2\57\1\0\56\57\20\0\2\116\62\0\1\117\55\0"+
    "\2\25\3\0\10\25\1\120\14\25\1\0\1\25\3\0"+
    "\1\121\21\0\2\25\3\0\20\25\1\122\4\25\1\0"+
    "\1\25\4\0\1\123\20\0\2\25\3\0\20\25\1\124"+
    "\4\25\1\0\1\25\4\0\1\125\20\0\2\25\3\0"+
    "\11\25\1\126\13\25\1\0\1\25\25\0\2\25\3\0"+
    "\21\25\1\127\3\25\1\0\1\25\25\0\2\25\3\0"+
    "\21\25\1\130\3\25\1\0\1\25\25\0\2\25\3\0"+
    "\3\25\1\131\21\25\1\0\1\25\25\0\2\25\3\0"+
    "\12\25\1\132\12\25\1\0\1\25\25\0\2\25\3\0"+
    "\21\25\1\133\3\25\1\0\1\25\25\0\2\25\3\0"+
    "\7\25\1\134\15\25\1\0\1\25\25\0\2\25\3\0"+
    "\17\25\1\135\5\25\1\0\1\25\25\0\2\25\3\0"+
    "\4\25\1\136\20\25\1\0\1\25\25\0\2\25\3\0"+
    "\22\25\1\137\2\25\1\0\1\25\25\0\2\25\3\0"+
    "\15\25\1\140\7\25\1\0\1\25\25\0\2\25\3\0"+
    "\10\25\1\141\14\25\1\0\1\25\3\0\1\142\21\0"+
    "\2\25\3\0\4\25\1\143\20\25\1\0\1\25\36\0"+
    "\1\144\47\0\2\25\3\0\4\25\1\145\20\25\1\0"+
    "\1\25\25\0\2\25\3\0\21\25\1\146\3\25\1\0"+
    "\1\25\53\0\1\147\12\0\15\150\1\151\43\150\44\0"+
    "\1\152\34\0\2\25\3\0\11\25\1\153\13\25\1\0"+
    "\1\25\43\0\1\154\42\0\2\25\3\0\4\25\1\155"+
    "\20\25\1\0\1\25\36\0\1\156\47\0\2\25\3\0"+
    "\4\25\1\157\20\25\1\0\1\25\36\0\1\160\47\0"+
    "\2\25\3\0\20\25\1\137\4\25\1\0\1\25\4\0"+
    "\1\161\20\0\2\25\3\0\2\25\1\162\22\25\1\0"+
    "\1\25\25\0\2\25\3\0\4\25\1\163\20\25\1\0"+
    "\1\25\25\0\2\25\3\0\4\25\1\164\20\25\1\0"+
    "\1\25\25\0\2\25\3\0\22\25\1\165\2\25\1\0"+
    "\1\25\25\0\2\25\3\0\13\25\1\166\11\25\1\0"+
    "\1\25\25\0\2\25\3\0\4\25\1\167\20\25\1\0"+
    "\1\25\25\0\2\25\3\0\4\25\1\170\20\25\1\0"+
    "\1\25\25\0\2\25\3\0\16\25\1\171\6\25\1\0"+
    "\1\25\50\0\1\172\35\0\2\25\3\0\17\25\1\173"+
    "\5\25\1\0\1\25\25\0\2\25\3\0\7\25\1\174"+
    "\15\25\1\0\1\25\41\0\1\175\24\0\15\150\1\176"+
    "\43\150\15\0\1\177\112\0\1\200\31\0\2\25\3\0"+
    "\10\25\1\201\14\25\1\0\1\25\3\0\1\202\36\0"+
    "\1\202\21\0\1\202\21\0\2\25\3\0\20\25\1\203"+
    "\4\25\1\0\1\25\4\0\1\204\45\0\1\204\12\0"+
    "\1\204\31\0\1\205\47\0\2\25\3\0\7\25\1\206"+
    "\15\25\1\0\1\25\25\0\2\25\3\0\20\25\1\207"+
    "\4\25\1\0\1\25\4\0\1\210\20\0\2\25\3\0"+
    "\17\25\1\211\5\25\1\0\1\25\25\0\2\25\3\0"+
    "\2\25\1\212\22\25\1\0\1\25\25\0\2\25\3\0"+
    "\22\25\1\213\2\25\1\0\1\25\54\0\1\214\31\0"+
    "\2\25\3\0\4\25\1\215\20\25\1\0\1\25\5\0"+
    "\15\150\1\176\40\150\1\216\2\150\15\0\1\177\40\0"+
    "\1\216\31\0\1\217\51\0\2\25\3\0\21\25\1\220"+
    "\3\25\1\0\1\25\53\0\1\221\32\0\2\25\3\0"+
    "\15\25\1\222\7\25\1\0\1\25\47\0\1\223\36\0"+
    "\2\25\3\0\23\25\1\224\1\25\1\0\1\25\25\0"+
    "\2\25\3\0\21\25\1\225\3\25\1\0\1\25\25\0"+
    "\2\25\3\0\4\25\1\226\20\25\1\0\1\25\36\0"+
    "\1\227\75\0\1\230\32\0\2\25\3\0\24\25\1\231"+
    "\1\0\1\25\56\0\1\232\27\0\2\25\3\0\1\233"+
    "\24\25\1\0\1\25\32\0\1\234\53\0\2\25\3\0"+
    "\10\25\1\235\14\25\1\0\1\25\3\0\1\236\21\0"+
    "\2\25\3\0\22\25\1\237\2\25\1\0\1\25\54\0"+
    "\1\240\31\0\2\25\3\0\2\25\1\241\22\25\1\0"+
    "\1\25\34\0\1\242\51\0\2\25\3\0\20\25\1\243"+
    "\4\25\1\0\1\25\4\0\1\244\45\0\1\244\12\0"+
    "\1\244\20\0\2\25\3\0\17\25\1\245\5\25\1\0"+
    "\1\25\51\0\1\246\34\0\2\25\3\0\4\25\1\247"+
    "\20\25\1\0\1\25\36\0\1\250\47\0\2\25\3\0"+
    "\4\25\1\251\20\25\1\0\1\25\36\0\1\252\47\0"+
    "\2\25\3\0\1\253\24\25\1\0\1\25\32\0\1\254"+
    "\53\0\2\25\3\0\11\25\1\255\13\25\1\0\1\25"+
    "\43\0\1\256\22\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6027];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\5\11\1\1\2\11"+
    "\2\1\1\11\20\1\1\11\3\1\1\11\2\1\1\0"+
    "\1\11\1\0\1\11\1\0\1\1\1\11\2\0\22\1"+
    "\1\0\2\1\2\0\2\11\1\0\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\14\1\1\0"+
    "\1\1\1\11\2\1\4\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\10\1\1\0\2\1\1\11\3\0"+
    "\1\1\1\0\1\1\2\11\2\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public UnisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 49: break;
          case 2:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 50: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 51: break;
          case 4:
            { return CIAPEK;
            }
          // fall through
          case 52: break;
          case 5:
            { return LPAREN;
            }
          // fall through
          case 53: break;
          case 6:
            { return RPAREN;
            }
          // fall through
          case 54: break;
          case 7:
            { return STAR;
            }
          // fall through
          case 55: break;
          case 8:
            { return PLUS;
            }
          // fall through
          case 56: break;
          case 9:
            { return COMMA;
            }
          // fall through
          case 57: break;
          case 10:
            { return MINUS;
            }
          // fall through
          case 58: break;
          case 11:
            { return DOT;
            }
          // fall through
          case 59: break;
          case 12:
            { return DIV;
            }
          // fall through
          case 60: break;
          case 13:
            { return DOUBLE;
            }
          // fall through
          case 61: break;
          case 14:
            { return INT;
            }
          // fall through
          case 62: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 63: break;
          case 16:
            { return EQ;
            }
          // fall through
          case 64: break;
          case 17:
            { return IDENTIFIER_TOKEN;
            }
          // fall through
          case 65: break;
          case 18:
            { return LAMBDA;
            }
          // fall through
          case 66: break;
          case 19:
            { return UNDERSCORE;
            }
          // fall through
          case 67: break;
          case 20:
            { return LBRACE;
            }
          // fall through
          case 68: break;
          case 21:
            { return BAR;
            }
          // fall through
          case 69: break;
          case 22:
            { return RBRACE;
            }
          // fall through
          case 70: break;
          case 23:
            { return STRING;
            }
          // fall through
          case 71: break;
          case 24:
            { return AND;
            }
          // fall through
          case 72: break;
          case 25:
            { return COMMENT;
            }
          // fall through
          case 73: break;
          case 26:
            { return ARROW;
            }
          // fall through
          case 74: break;
          case 27:
            { return DO;
            }
          // fall through
          case 75: break;
          case 28:
            { return IF;
            }
          // fall through
          case 76: break;
          case 29:
            { return OR;
            }
          // fall through
          case 77: break;
          case 30:
            { return CHAR;
            }
          // fall through
          case 78: break;
          case 31:
            { return EQ3;
            }
          // fall through
          case 79: break;
          case 32:
            { return LET;
            }
          // fall through
          case 80: break;
          case 33:
            { return MOD;
            }
          // fall through
          case 81: break;
          case 34:
            { return NOT;
            }
          // fall through
          case 82: break;
          case 35:
            { return USE;
            }
          // fall through
          case 83: break;
          case 36:
            { return ELSE;
            }
          // fall through
          case 84: break;
          case 37:
            { return THEN;
            }
          // fall through
          case 85: break;
          case 38:
            { return BOOLEAN;
            }
          // fall through
          case 86: break;
          case 39:
            { return TYPE;
            }
          // fall through
          case 87: break;
          case 40:
            { return WITH;
            }
          // fall through
          case 88: break;
          case 41:
            { return CASES;
            }
          // fall through
          case 89: break;
          case 42:
            { return MATCH;
            }
          // fall through
          case 90: break;
          case 43:
            { return WHERE;
            }
          // fall through
          case 91: break;
          case 44:
            { return UNIQUE;
            }
          // fall through
          case 92: break;
          case 45:
            { return ABILITY;
            }
          // fall through
          case 93: break;
          case 46:
            { return NAMESPACE;
            }
          // fall through
          case 94: break;
          case 47:
            { return OTHERWISE;
            }
          // fall through
          case 95: break;
          case 48:
            { return STRUCTURAL;
            }
          // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
