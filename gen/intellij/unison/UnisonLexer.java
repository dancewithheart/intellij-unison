// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Unison.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
/* Unison lexer specification */
/* ===================== User Code =================== */
package intellij.unison;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.unison.language.psi.UnisonTypes.*;


public class UnisonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\3\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\0\1\17\11\20\1\21\2\0"+
    "\1\22\1\23\2\0\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\2\32\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\32"+
    "\1\47\1\32\1\50\1\32\1\0\1\51\2\0\1\52"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\2\32\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\32\1\47\1\32"+
    "\1\50\1\32\1\53\1\54\1\55\7\0\1\3\252\0"+
    "\2\56\115\0\1\57\u01a8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\17\20\1\21\1\22\1\23\1\24\1\25\2\1"+
    "\1\0\1\26\1\0\1\27\1\0\1\30\1\31\2\0"+
    "\2\20\1\32\2\20\1\33\13\20\1\0\2\20\2\0"+
    "\1\34\1\33\1\0\1\35\1\14\1\36\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\37\1\20\1\40"+
    "\7\20\1\0\2\41\2\20\4\0\1\20\1\0\1\20"+
    "\1\0\2\42\1\0\4\20\1\43\1\44\1\45\1\20"+
    "\1\0\1\20\2\46\3\0\1\20\1\0\2\47\1\44"+
    "\1\50\1\20\1\0\3\20\1\0\1\51\1\30\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\52\1\0\2\53"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\54\2\55\1\20\1\0"+
    "\2\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\220\0\300\0\360\0\60"+
    "\0\60\0\60\0\60\0\60\0\u0120\0\60\0\u0150\0\u0180"+
    "\0\60\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0480\0\60\0\u0210\0\u04b0\0\u04e0\0\60\0\u0510\0\u0540"+
    "\0\220\0\60\0\u0570\0\60\0\u05a0\0\u05d0\0\60\0\u0600"+
    "\0\u0630\0\u0660\0\u0690\0\u0210\0\u06c0\0\u06f0\0\u0210\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\60"+
    "\0\60\0\u0a20\0\60\0\u0600\0\60\0\u0a50\0\u0a80\0\u0ab0"+
    "\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0210\0\u0ba0\0\u0210\0\u0bd0"+
    "\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0210"+
    "\0\60\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70"+
    "\0\u0ea0\0\u0ed0\0\u0f00\0\u0210\0\60\0\u0f30\0\u0f60\0\u0f90"+
    "\0\u0fc0\0\u0ff0\0\u0210\0\u0210\0\u0210\0\u1020\0\u1050\0\u1080"+
    "\0\u0210\0\60\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u0210"+
    "\0\60\0\60\0\u0210\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\u1290\0\u0210\0\60\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380"+
    "\0\u13b0\0\u13e0\0\u0210\0\60\0\u1410\0\u0210\0\60\0\u1440"+
    "\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0"+
    "\0\u15f0\0\u1620\0\u1650\0\u0210\0\60\0\u0210\0\60\0\u1680"+
    "\0\u16b0\0\u0210\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\2\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\24\1\31\1\32\1\33\1\34\1\35\3\24"+
    "\1\36\1\37\1\40\1\41\1\24\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\61\0\2\3\55\0\5\51"+
    "\1\52\43\51\1\53\6\51\6\0\1\54\51\0\7\55"+
    "\1\0\50\55\15\0\1\56\5\0\1\57\52\0\1\60"+
    "\2\17\55\0\1\60\2\20\61\0\1\61\54\0\2\24"+
    "\3\0\1\24\1\62\23\24\1\0\1\24\24\0\2\24"+
    "\3\0\25\24\1\0\1\24\24\0\2\24\3\0\1\63"+
    "\24\24\1\0\1\24\24\0\2\24\3\0\14\24\1\64"+
    "\10\24\1\0\1\24\24\0\2\24\3\0\11\24\1\65"+
    "\13\24\1\0\1\24\24\0\2\24\3\0\1\66\24\24"+
    "\1\0\1\24\24\0\2\24\3\0\5\24\1\67\17\24"+
    "\1\0\1\24\24\0\2\24\3\0\4\24\1\70\20\24"+
    "\1\0\1\24\24\0\2\24\3\0\1\71\13\24\1\72"+
    "\10\24\1\0\1\24\24\0\2\24\3\0\1\73\24\24"+
    "\1\0\1\24\24\0\2\24\3\0\21\24\1\74\3\24"+
    "\1\0\1\24\24\0\2\24\3\0\21\24\1\75\3\24"+
    "\1\0\1\24\24\0\2\24\3\0\7\24\1\76\7\24"+
    "\1\77\4\24\1\100\1\0\1\24\24\0\2\24\3\0"+
    "\13\24\1\101\4\24\1\102\4\24\1\0\1\24\4\0"+
    "\1\103\17\0\2\24\3\0\7\24\1\104\1\105\14\24"+
    "\1\0\1\24\3\0\1\106\16\0\1\107\116\0\1\110"+
    "\34\0\1\111\73\0\1\112\12\0\2\51\2\0\54\51"+
    "\7\0\1\113\50\0\2\56\1\0\55\56\17\0\2\114"+
    "\61\0\1\115\54\0\2\24\3\0\10\24\1\116\14\24"+
    "\1\0\1\24\3\0\1\117\20\0\2\24\3\0\20\24"+
    "\1\120\4\24\1\0\1\24\4\0\1\121\17\0\2\24"+
    "\3\0\20\24\1\122\4\24\1\0\1\24\4\0\1\123"+
    "\17\0\2\24\3\0\11\24\1\124\13\24\1\0\1\24"+
    "\24\0\2\24\3\0\21\24\1\125\3\24\1\0\1\24"+
    "\24\0\2\24\3\0\21\24\1\126\3\24\1\0\1\24"+
    "\24\0\2\24\3\0\3\24\1\127\21\24\1\0\1\24"+
    "\24\0\2\24\3\0\12\24\1\130\12\24\1\0\1\24"+
    "\24\0\2\24\3\0\7\24\1\131\15\24\1\0\1\24"+
    "\24\0\2\24\3\0\17\24\1\132\5\24\1\0\1\24"+
    "\24\0\2\24\3\0\4\24\1\133\20\24\1\0\1\24"+
    "\24\0\2\24\3\0\22\24\1\134\2\24\1\0\1\24"+
    "\24\0\2\24\3\0\15\24\1\135\7\24\1\0\1\24"+
    "\24\0\2\24\3\0\10\24\1\136\14\24\1\0\1\24"+
    "\3\0\1\137\20\0\2\24\3\0\4\24\1\140\20\24"+
    "\1\0\1\24\35\0\1\141\46\0\2\24\3\0\4\24"+
    "\1\142\20\24\1\0\1\24\24\0\2\24\3\0\21\24"+
    "\1\143\3\24\1\0\1\24\52\0\1\144\12\0\15\145"+
    "\1\146\42\145\43\0\1\147\33\0\2\24\3\0\11\24"+
    "\1\150\13\24\1\0\1\24\42\0\1\151\41\0\2\24"+
    "\3\0\4\24\1\152\20\24\1\0\1\24\35\0\1\153"+
    "\46\0\2\24\3\0\4\24\1\154\20\24\1\0\1\24"+
    "\35\0\1\155\46\0\2\24\3\0\20\24\1\134\4\24"+
    "\1\0\1\24\4\0\1\156\17\0\2\24\3\0\2\24"+
    "\1\157\22\24\1\0\1\24\24\0\2\24\3\0\4\24"+
    "\1\160\20\24\1\0\1\24\24\0\2\24\3\0\4\24"+
    "\1\161\20\24\1\0\1\24\24\0\2\24\3\0\22\24"+
    "\1\162\2\24\1\0\1\24\24\0\2\24\3\0\13\24"+
    "\1\163\11\24\1\0\1\24\24\0\2\24\3\0\4\24"+
    "\1\164\20\24\1\0\1\24\24\0\2\24\3\0\4\24"+
    "\1\165\20\24\1\0\1\24\24\0\2\24\3\0\16\24"+
    "\1\166\6\24\1\0\1\24\47\0\1\167\34\0\2\24"+
    "\3\0\17\24\1\170\5\24\1\0\1\24\24\0\2\24"+
    "\3\0\7\24\1\171\15\24\1\0\1\24\40\0\1\172"+
    "\24\0\15\145\1\173\42\145\15\0\1\174\110\0\1\175"+
    "\30\0\2\24\3\0\10\24\1\176\14\24\1\0\1\24"+
    "\3\0\1\177\35\0\1\177\21\0\1\177\20\0\2\24"+
    "\3\0\20\24\1\200\4\24\1\0\1\24\4\0\1\201"+
    "\44\0\1\201\12\0\1\201\30\0\1\202\46\0\2\24"+
    "\3\0\7\24\1\203\15\24\1\0\1\24\24\0\2\24"+
    "\3\0\20\24\1\204\4\24\1\0\1\24\4\0\1\205"+
    "\17\0\2\24\3\0\17\24\1\206\5\24\1\0\1\24"+
    "\24\0\2\24\3\0\2\24\1\207\22\24\1\0\1\24"+
    "\24\0\2\24\3\0\22\24\1\210\2\24\1\0\1\24"+
    "\53\0\1\211\30\0\2\24\3\0\4\24\1\212\20\24"+
    "\1\0\1\24\5\0\15\145\1\173\37\145\1\213\2\145"+
    "\15\0\1\174\37\0\1\213\30\0\1\214\50\0\2\24"+
    "\3\0\21\24\1\215\3\24\1\0\1\24\52\0\1\216"+
    "\31\0\2\24\3\0\15\24\1\217\7\24\1\0\1\24"+
    "\46\0\1\220\35\0\2\24\3\0\23\24\1\221\1\24"+
    "\1\0\1\24\24\0\2\24\3\0\21\24\1\222\3\24"+
    "\1\0\1\24\24\0\2\24\3\0\4\24\1\223\20\24"+
    "\1\0\1\24\35\0\1\224\74\0\1\225\31\0\2\24"+
    "\3\0\24\24\1\226\1\0\1\24\55\0\1\227\26\0"+
    "\2\24\3\0\1\230\24\24\1\0\1\24\31\0\1\231"+
    "\52\0\2\24\3\0\10\24\1\232\14\24\1\0\1\24"+
    "\3\0\1\233\20\0\2\24\3\0\22\24\1\234\2\24"+
    "\1\0\1\24\53\0\1\235\30\0\2\24\3\0\2\24"+
    "\1\236\22\24\1\0\1\24\33\0\1\237\50\0\2\24"+
    "\3\0\20\24\1\240\4\24\1\0\1\24\4\0\1\241"+
    "\44\0\1\241\12\0\1\241\17\0\2\24\3\0\17\24"+
    "\1\242\5\24\1\0\1\24\50\0\1\243\33\0\2\24"+
    "\3\0\4\24\1\244\20\24\1\0\1\24\35\0\1\245"+
    "\46\0\2\24\3\0\4\24\1\246\20\24\1\0\1\24"+
    "\35\0\1\247\46\0\2\24\3\0\1\250\24\24\1\0"+
    "\1\24\31\0\1\251\52\0\2\24\3\0\11\24\1\252"+
    "\13\24\1\0\1\24\42\0\1\253\22\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5856];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\5\11\1\1\1\11"+
    "\2\1\1\11\20\1\1\11\3\1\1\11\2\1\1\0"+
    "\1\11\1\0\1\11\1\0\1\1\1\11\2\0\21\1"+
    "\1\0\2\1\2\0\2\11\1\0\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\13\1\1\0"+
    "\1\1\1\11\2\1\4\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\10\1\1\0\2\1\1\11\3\0"+
    "\1\1\1\0\1\1\2\11\2\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public UnisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 47: break;
          case 2:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 48: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 49: break;
          case 4:
            { return CIAPEK;
            }
          // fall through
          case 50: break;
          case 5:
            { return LPAREN;
            }
          // fall through
          case 51: break;
          case 6:
            { return RPAREN;
            }
          // fall through
          case 52: break;
          case 7:
            { return STAR;
            }
          // fall through
          case 53: break;
          case 8:
            { return PLUS;
            }
          // fall through
          case 54: break;
          case 9:
            { return COMMA;
            }
          // fall through
          case 55: break;
          case 10:
            { return MINUS;
            }
          // fall through
          case 56: break;
          case 11:
            { return DOT;
            }
          // fall through
          case 57: break;
          case 12:
            { return DOUBLE;
            }
          // fall through
          case 58: break;
          case 13:
            { return INT;
            }
          // fall through
          case 59: break;
          case 14:
            { return COLON;
            }
          // fall through
          case 60: break;
          case 15:
            { return EQ;
            }
          // fall through
          case 61: break;
          case 16:
            { return IDENTIFIER_TOKEN;
            }
          // fall through
          case 62: break;
          case 17:
            { return LAMBDA;
            }
          // fall through
          case 63: break;
          case 18:
            { return UNDERSCORE;
            }
          // fall through
          case 64: break;
          case 19:
            { return LBRACE;
            }
          // fall through
          case 65: break;
          case 20:
            { return BAR;
            }
          // fall through
          case 66: break;
          case 21:
            { return RBRACE;
            }
          // fall through
          case 67: break;
          case 22:
            { return TEXT;
            }
          // fall through
          case 68: break;
          case 23:
            { return AND;
            }
          // fall through
          case 69: break;
          case 24:
            { return COMMENT;
            }
          // fall through
          case 70: break;
          case 25:
            { return ARROW;
            }
          // fall through
          case 71: break;
          case 26:
            { return DO;
            }
          // fall through
          case 72: break;
          case 27:
            { return IF;
            }
          // fall through
          case 73: break;
          case 28:
            { return OR;
            }
          // fall through
          case 74: break;
          case 29:
            { return CHAR;
            }
          // fall through
          case 75: break;
          case 30:
            { return EQ3;
            }
          // fall through
          case 76: break;
          case 31:
            { return LET;
            }
          // fall through
          case 77: break;
          case 32:
            { return MOD;
            }
          // fall through
          case 78: break;
          case 33:
            { return USE;
            }
          // fall through
          case 79: break;
          case 34:
            { return ELSE;
            }
          // fall through
          case 80: break;
          case 35:
            { return THEN;
            }
          // fall through
          case 81: break;
          case 36:
            { return BOOLEAN;
            }
          // fall through
          case 82: break;
          case 37:
            { return TYPE;
            }
          // fall through
          case 83: break;
          case 38:
            { return WITH;
            }
          // fall through
          case 84: break;
          case 39:
            { return CASES;
            }
          // fall through
          case 85: break;
          case 40:
            { return MATCH;
            }
          // fall through
          case 86: break;
          case 41:
            { return WHERE;
            }
          // fall through
          case 87: break;
          case 42:
            { return UNIQUE;
            }
          // fall through
          case 88: break;
          case 43:
            { return ABILITY;
            }
          // fall through
          case 89: break;
          case 44:
            { return NAMESPACE;
            }
          // fall through
          case 90: break;
          case 45:
            { return OTHERWISE;
            }
          // fall through
          case 91: break;
          case 46:
            { return STRUCTURAL;
            }
          // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
