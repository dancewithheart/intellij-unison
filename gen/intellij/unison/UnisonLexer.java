// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Unison.flex

/* Unison lexer specification */
/* ===================== User Code =================== */
package intellij.unison;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.unison.language.psi.UnisonTypes.*;


public class UnisonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\1\u0500\265\u0200\10\u0600"+
    "\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\6\1\10\1\11\1\12"+
    "\1\7\1\13\1\14\1\15\1\16\1\7\1\17\11\20"+
    "\1\21\1\0\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\35\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\35\1\53\1\54\1\55"+
    "\1\35\1\56\1\57\1\60\1\6\1\61\1\0\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\70\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\70\1\106\1\107\1\110"+
    "\1\70\1\111\1\112\1\113\1\6\6\0\1\3\252\0"+
    "\2\114\115\0\1\115\u01a8\0\2\3\u0100\0\1\116\325\0"+
    "\1\117\377\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\2\1\1\1\5\1\6"+
    "\1\7\1\1\1\10\1\1\1\11\2\12\1\13\1\14"+
    "\1\2\1\15\21\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\2\1\25\1\0\1\26\1\0\1\27"+
    "\1\30\1\31\1\32\2\0\1\33\6\1\1\34\5\1"+
    "\1\35\16\1\1\0\2\1\2\0\1\35\2\0\1\26"+
    "\1\0\1\26\1\36\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\3\1\1\0\4\1\1\37\1\40\1\1"+
    "\1\41\1\1\1\42\1\43\10\1\1\0\2\44\2\1"+
    "\3\0\1\37\2\0\1\45\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\46\1\1\2\47\1\0\5\1\1\0"+
    "\3\1\1\50\1\51\1\52\1\53\1\1\1\0\1\1"+
    "\2\54\4\0\1\1\1\0\2\55\1\1\2\56\2\57"+
    "\1\1\1\52\1\60\2\1\1\61\1\1\2\0\1\62"+
    "\1\63\5\1\1\0\1\64\1\31\2\0\1\1\1\0"+
    "\1\1\1\65\1\66\1\67\1\1\1\0\1\63\3\1"+
    "\1\0\1\1\1\0\2\70\1\0\2\71\1\72\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\73\2\74\1\0\2\75"+
    "\2\76\1\1\1\0\2\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\360\0\u0190\0\u01e0"+
    "\0\120\0\u0230\0\120\0\u0280\0\120\0\u02d0\0\u0320\0\360"+
    "\0\360\0\u0370\0\120\0\u03c0\0\u0410\0\u0460\0\u04b0\0\u0500"+
    "\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0\0\u0730\0\u0780"+
    "\0\u07d0\0\u0820\0\u0870\0\u08c0\0\120\0\360\0\120\0\u05a0"+
    "\0\u0910\0\360\0\120\0\u0960\0\u09b0\0\120\0\u0a00\0\u0a50"+
    "\0\u0aa0\0\120\0\120\0\u0af0\0\360\0\u0b40\0\u0b90\0\120"+
    "\0\u0be0\0\u0c30\0\u0c80\0\u0cd0\0\u0d20\0\u0d70\0\u0dc0\0\u0e10"+
    "\0\u0e60\0\u0eb0\0\u0f00\0\u0f50\0\u05a0\0\u0fa0\0\u0ff0\0\u1040"+
    "\0\u1090\0\u10e0\0\u1130\0\u1180\0\u11d0\0\u1220\0\u1270\0\u12c0"+
    "\0\u1310\0\u1360\0\u13b0\0\u1400\0\u1450\0\u14a0\0\u14f0\0\u1540"+
    "\0\120\0\u1590\0\u15e0\0\120\0\u1630\0\u0a00\0\u0b40\0\u1680"+
    "\0\u16d0\0\u1720\0\u1770\0\u17c0\0\u1810\0\u1860\0\u18b0\0\u1900"+
    "\0\u1950\0\u19a0\0\u19f0\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u1b80"+
    "\0\u05a0\0\u05a0\0\u1bd0\0\u05a0\0\u1c20\0\u1c70\0\u05a0\0\u1cc0"+
    "\0\u1d10\0\u1d60\0\u1db0\0\u1e00\0\u1e50\0\u1ea0\0\u1ef0\0\u1f40"+
    "\0\u05a0\0\120\0\u1f90\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\120"+
    "\0\u2120\0\u2170\0\u1680\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300"+
    "\0\u2350\0\u23a0\0\u23f0\0\u05a0\0\u2440\0\u05a0\0\120\0\u2490"+
    "\0\u24e0\0\u2530\0\u2580\0\u25d0\0\u2620\0\u2670\0\u26c0\0\u2710"+
    "\0\u2760\0\u05a0\0\u05a0\0\u05a0\0\u27b0\0\u2800\0\u2850\0\u28a0"+
    "\0\u05a0\0\120\0\u28f0\0\u2940\0\u2990\0\u29e0\0\u2a30\0\u2a80"+
    "\0\u05a0\0\120\0\u2ad0\0\u05a0\0\120\0\u05a0\0\120\0\u2b20"+
    "\0\120\0\u05a0\0\u2b70\0\u2bc0\0\u05a0\0\u2c10\0\u2c60\0\u2cb0"+
    "\0\120\0\u2cb0\0\u2d00\0\u2d50\0\u2da0\0\u2df0\0\u2e40\0\u2e90"+
    "\0\u05a0\0\120\0\u2ee0\0\u2f30\0\u2f80\0\u2fd0\0\u3020\0\u05a0"+
    "\0\u05a0\0\u05a0\0\u3070\0\u30c0\0\120\0\u3110\0\u3160\0\u31b0"+
    "\0\u3200\0\u3250\0\u32a0\0\u05a0\0\120\0\u32f0\0\u05a0\0\120"+
    "\0\u05a0\0\u3340\0\u3390\0\u33e0\0\u3430\0\u3480\0\u34d0\0\u3520"+
    "\0\u3570\0\u35c0\0\u3610\0\u3660\0\u36b0\0\u3700\0\u3750\0\u37a0"+
    "\0\u05a0\0\120\0\u05a0\0\120\0\u37f0\0\u05a0\0\120\0\u05a0"+
    "\0\120\0\u3840\0\u3890\0\u05a0\0\120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\2\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\6\1\21\1\6\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\32\1\35"+
    "\1\36\1\37\1\40\3\32\1\41\1\42\1\43\1\44"+
    "\2\32\1\45\1\46\1\47\1\50\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\32\1\35"+
    "\1\36\1\37\1\40\3\32\1\41\1\42\1\43\1\44"+
    "\2\32\1\51\1\52\1\53\1\54\1\55\1\2\1\56"+
    "\121\0\2\3\121\0\1\6\1\0\2\6\3\0\1\6"+
    "\1\0\1\6\3\0\4\6\32\0\1\6\32\0\1\6"+
    "\5\0\2\57\1\0\2\57\1\60\51\57\1\61\40\57"+
    "\111\0\1\62\20\0\1\63\111\0\1\6\1\0\2\6"+
    "\3\0\1\6\1\0\1\6\1\0\2\17\4\6\32\0"+
    "\1\6\32\0\1\6\11\0\1\6\1\0\2\6\3\0"+
    "\1\6\1\0\1\64\1\0\2\17\3\6\1\65\32\0"+
    "\1\6\32\0\1\6\23\0\1\66\2\17\33\0\1\67"+
    "\32\0\1\67\26\0\1\66\2\17\77\0\2\70\2\0"+
    "\114\70\17\0\2\32\6\0\1\32\1\71\10\32\1\72"+
    "\14\32\3\0\2\32\1\71\10\32\1\72\14\32\26\0"+
    "\2\32\6\0\15\32\1\73\10\32\1\74\3\0\16\32"+
    "\1\73\10\32\1\74\26\0\2\32\6\0\1\75\6\32"+
    "\1\76\17\32\3\0\1\32\1\75\6\32\1\76\17\32"+
    "\26\0\2\32\6\0\15\32\1\77\11\32\3\0\16\32"+
    "\1\77\11\32\26\0\2\32\6\0\12\32\1\100\14\32"+
    "\3\0\13\32\1\100\14\32\26\0\2\32\6\0\1\101"+
    "\11\32\1\102\2\32\1\103\11\32\3\0\1\32\1\101"+
    "\11\32\1\102\2\32\1\103\11\32\26\0\2\32\6\0"+
    "\27\32\3\0\30\32\26\0\2\32\6\0\1\104\26\32"+
    "\3\0\1\32\1\104\26\32\26\0\2\32\6\0\5\32"+
    "\1\105\6\32\1\106\12\32\3\0\6\32\1\105\6\32"+
    "\1\106\12\32\26\0\2\32\6\0\4\32\1\107\22\32"+
    "\3\0\5\32\1\107\22\32\26\0\2\32\6\0\1\110"+
    "\14\32\1\111\11\32\3\0\1\32\1\110\14\32\1\111"+
    "\11\32\26\0\2\32\6\0\1\112\14\32\1\113\11\32"+
    "\3\0\1\32\1\112\14\32\1\113\11\32\26\0\2\32"+
    "\6\0\22\32\1\114\4\32\3\0\23\32\1\114\4\32"+
    "\26\0\2\32\6\0\22\32\1\115\4\32\3\0\23\32"+
    "\1\115\4\32\26\0\2\32\6\0\4\32\1\116\2\32"+
    "\1\117\10\32\1\120\5\32\1\121\3\0\5\32\1\116"+
    "\2\32\1\117\10\32\1\120\5\32\1\121\26\0\2\32"+
    "\6\0\14\32\1\122\4\32\1\123\5\32\3\0\15\32"+
    "\1\122\4\32\1\123\5\32\4\0\1\124\21\0\2\32"+
    "\6\0\7\32\1\125\1\126\16\32\3\0\10\32\1\125"+
    "\1\126\16\32\3\0\1\127\20\0\1\130\136\0\1\131"+
    "\6\0\1\132\23\0\1\131\6\0\1\132\72\0\1\133"+
    "\32\0\1\133\13\0\2\57\1\0\2\57\1\134\51\57"+
    "\1\61\40\57\5\0\1\135\112\0\2\57\1\0\2\57"+
    "\1\136\51\57\1\61\40\57\2\64\1\0\115\64\17\0"+
    "\2\137\147\0\1\140\32\0\1\140\11\0\1\140\21\0"+
    "\2\32\6\0\10\32\1\141\16\32\3\0\11\32\1\141"+
    "\16\32\3\0\1\142\22\0\2\32\6\0\10\32\1\143"+
    "\16\32\3\0\11\32\1\143\16\32\3\0\1\144\22\0"+
    "\2\32\6\0\15\32\1\145\11\32\3\0\16\32\1\145"+
    "\11\32\26\0\2\32\6\0\22\32\1\146\4\32\3\0"+
    "\23\32\1\146\4\32\26\0\2\32\6\0\21\32\1\147"+
    "\5\32\3\0\22\32\1\147\5\32\4\0\1\150\21\0"+
    "\2\32\6\0\1\151\26\32\3\0\1\32\1\151\26\32"+
    "\26\0\2\32\6\0\23\32\1\152\3\32\3\0\24\32"+
    "\1\152\3\32\26\0\2\32\6\0\21\32\1\153\5\32"+
    "\3\0\22\32\1\153\5\32\4\0\1\154\21\0\2\32"+
    "\6\0\12\32\1\155\14\32\3\0\13\32\1\155\14\32"+
    "\26\0\2\32\6\0\15\32\1\156\11\32\3\0\16\32"+
    "\1\156\11\32\26\0\2\32\6\0\20\32\1\157\6\32"+
    "\3\0\21\32\1\157\6\32\26\0\2\32\6\0\14\32"+
    "\1\160\12\32\3\0\15\32\1\160\12\32\26\0\2\32"+
    "\6\0\22\32\1\161\4\32\3\0\23\32\1\161\4\32"+
    "\26\0\2\32\6\0\22\32\1\162\4\32\3\0\23\32"+
    "\1\162\4\32\26\0\2\32\6\0\22\32\1\163\4\32"+
    "\3\0\23\32\1\163\4\32\26\0\2\32\6\0\3\32"+
    "\1\164\23\32\3\0\4\32\1\164\23\32\26\0\2\32"+
    "\6\0\13\32\1\165\6\32\1\166\4\32\3\0\14\32"+
    "\1\165\6\32\1\166\4\32\26\0\2\32\6\0\22\32"+
    "\1\167\4\32\3\0\23\32\1\167\4\32\26\0\2\32"+
    "\6\0\7\32\1\170\17\32\3\0\10\32\1\170\17\32"+
    "\26\0\2\32\6\0\20\32\1\171\6\32\3\0\21\32"+
    "\1\171\6\32\26\0\2\32\6\0\20\32\1\172\4\32"+
    "\1\173\1\32\3\0\21\32\1\172\4\32\1\173\1\32"+
    "\26\0\2\32\6\0\4\32\1\174\22\32\3\0\5\32"+
    "\1\174\22\32\26\0\2\32\6\0\23\32\1\175\3\32"+
    "\3\0\24\32\1\175\3\32\26\0\2\32\6\0\16\32"+
    "\1\176\10\32\3\0\17\32\1\176\10\32\26\0\2\32"+
    "\6\0\10\32\1\177\16\32\3\0\11\32\1\177\16\32"+
    "\3\0\1\200\22\0\2\32\6\0\4\32\1\201\22\32"+
    "\3\0\5\32\1\201\22\32\42\0\1\202\32\0\1\202"+
    "\50\0\2\32\6\0\4\32\1\203\22\32\3\0\5\32"+
    "\1\203\22\32\26\0\2\32\6\0\22\32\1\204\4\32"+
    "\3\0\23\32\1\204\4\32\60\0\1\205\32\0\1\205"+
    "\13\0\15\206\1\207\102\206\51\0\1\210\32\0\1\210"+
    "\62\0\1\211\32\0\1\211\15\0\5\212\1\0\112\212"+
    "\17\0\2\213\41\0\27\213\26\0\2\32\6\0\12\32"+
    "\1\214\14\32\3\0\13\32\1\214\14\32\50\0\1\215"+
    "\32\0\1\215\42\0\2\32\6\0\1\216\26\32\3\0"+
    "\1\32\1\216\26\32\36\0\1\217\32\0\1\217\54\0"+
    "\2\32\6\0\12\32\1\220\14\32\3\0\13\32\1\220"+
    "\14\32\26\0\2\32\6\0\4\32\1\221\22\32\3\0"+
    "\5\32\1\221\22\32\26\0\2\32\6\0\4\32\1\222"+
    "\22\32\3\0\5\32\1\222\22\32\42\0\1\223\32\0"+
    "\1\223\50\0\2\32\6\0\20\32\1\224\6\32\3\0"+
    "\21\32\1\224\6\32\26\0\2\32\6\0\1\32\1\225"+
    "\25\32\3\0\2\32\1\225\25\32\26\0\2\32\6\0"+
    "\4\32\1\226\22\32\3\0\5\32\1\226\22\32\42\0"+
    "\1\227\32\0\1\227\50\0\2\32\6\0\21\32\1\175"+
    "\5\32\3\0\22\32\1\175\5\32\4\0\1\230\21\0"+
    "\2\32\6\0\1\231\26\32\3\0\1\32\1\231\26\32"+
    "\26\0\2\32\6\0\1\232\26\32\3\0\1\32\1\232"+
    "\26\32\26\0\2\32\6\0\3\32\1\233\23\32\3\0"+
    "\4\32\1\233\23\32\26\0\2\32\6\0\2\32\1\234"+
    "\24\32\3\0\3\32\1\234\24\32\26\0\2\32\6\0"+
    "\4\32\1\235\22\32\3\0\5\32\1\235\22\32\25\0"+
    "\1\236\2\32\6\0\27\32\3\0\30\32\26\0\2\32"+
    "\6\0\4\32\1\237\22\32\3\0\5\32\1\237\22\32"+
    "\26\0\2\32\6\0\23\32\1\240\3\32\3\0\24\32"+
    "\1\240\3\32\26\0\2\32\6\0\13\32\1\241\13\32"+
    "\3\0\14\32\1\241\13\32\26\0\2\32\6\0\22\32"+
    "\1\242\4\32\3\0\23\32\1\242\4\32\26\0\2\32"+
    "\6\0\14\32\1\243\12\32\3\0\15\32\1\243\12\32"+
    "\26\0\2\32\6\0\4\32\1\244\22\32\3\0\5\32"+
    "\1\244\22\32\26\0\2\32\6\0\4\32\1\245\22\32"+
    "\3\0\5\32\1\245\22\32\26\0\2\32\6\0\17\32"+
    "\1\246\7\32\3\0\20\32\1\246\7\32\55\0\1\247"+
    "\32\0\1\247\35\0\2\32\6\0\20\32\1\250\6\32"+
    "\3\0\21\32\1\250\6\32\26\0\2\32\6\0\7\32"+
    "\1\251\17\32\3\0\10\32\1\251\17\32\45\0\1\252"+
    "\32\0\1\252\26\0\15\206\1\253\102\206\15\0\1\254"+
    "\154\0\1\255\32\0\1\255\12\0\5\212\1\256\112\212"+
    "\17\0\2\32\6\0\10\32\1\257\16\32\3\0\11\32"+
    "\1\257\16\32\3\0\1\260\42\0\1\260\32\0\1\260"+
    "\21\0\1\260\22\0\2\32\6\0\21\32\1\261\5\32"+
    "\3\0\22\32\1\261\5\32\4\0\1\262\52\0\1\262"+
    "\32\0\1\262\11\0\1\262\21\0\2\32\6\0\4\32"+
    "\1\263\22\32\3\0\5\32\1\263\22\32\26\0\2\32"+
    "\6\0\21\32\1\264\5\32\3\0\22\32\1\264\5\32"+
    "\4\0\1\265\21\0\2\32\6\0\21\32\1\266\5\32"+
    "\3\0\22\32\1\266\5\32\4\0\1\267\52\0\1\267"+
    "\32\0\1\267\11\0\1\267\21\0\2\32\6\0\12\32"+
    "\1\270\14\32\3\0\13\32\1\270\14\32\42\0\1\271"+
    "\32\0\1\271\50\0\2\32\6\0\22\32\1\272\4\32"+
    "\3\0\23\32\1\272\4\32\26\0\2\32\6\0\12\32"+
    "\1\273\14\32\3\0\13\32\1\273\14\32\26\0\2\32"+
    "\6\0\12\32\1\274\14\32\3\0\13\32\1\274\14\32"+
    "\26\0\2\32\6\0\7\32\1\275\17\32\3\0\10\32"+
    "\1\275\17\32\26\0\2\32\6\0\21\32\1\276\5\32"+
    "\3\0\22\32\1\276\5\32\4\0\1\277\6\0\1\300"+
    "\2\0\1\301\3\0\1\301\1\0\1\301\4\0\1\302"+
    "\1\0\1\302\112\0\2\32\6\0\20\32\1\303\6\32"+
    "\3\0\21\32\1\303\6\32\26\0\2\32\6\0\2\32"+
    "\1\304\24\32\3\0\3\32\1\304\24\32\26\0\2\32"+
    "\6\0\12\32\1\305\14\32\3\0\13\32\1\305\14\32"+
    "\26\0\2\32\6\0\12\32\1\306\14\32\3\0\13\32"+
    "\1\306\14\32\26\0\2\32\6\0\23\32\1\307\3\32"+
    "\3\0\24\32\1\307\3\32\61\0\1\310\32\0\1\310"+
    "\31\0\2\32\6\0\4\32\1\311\22\32\3\0\5\32"+
    "\1\311\22\32\7\0\15\206\1\253\75\206\1\312\4\206"+
    "\15\0\1\254\75\0\1\312\35\0\1\313\32\0\1\313"+
    "\40\0\1\314\131\0\2\32\6\0\22\32\1\315\4\32"+
    "\3\0\23\32\1\315\4\32\60\0\1\316\32\0\1\316"+
    "\32\0\2\32\6\0\1\317\26\32\3\0\1\32\1\317"+
    "\26\32\26\0\2\32\6\0\4\32\1\320\22\32\3\0"+
    "\5\32\1\320\22\32\26\0\2\32\6\0\12\32\1\321"+
    "\14\32\3\0\13\32\1\321\14\32\26\0\2\32\6\0"+
    "\4\32\1\322\22\32\3\0\5\32\1\322\22\32\26\0"+
    "\2\32\6\0\16\32\1\323\10\32\3\0\17\32\1\323"+
    "\10\32\54\0\1\324\32\0\1\324\42\0\1\325\113\0"+
    "\2\32\6\0\24\32\1\326\2\32\3\0\25\32\1\326"+
    "\2\32\26\0\2\32\6\0\22\32\1\327\4\32\3\0"+
    "\23\32\1\327\4\32\26\0\2\32\6\0\10\32\1\330"+
    "\16\32\3\0\11\32\1\330\16\32\3\0\1\331\22\0"+
    "\2\32\6\0\10\32\1\332\16\32\3\0\11\32\1\332"+
    "\16\32\3\0\1\333\22\0\2\32\6\0\4\32\1\334"+
    "\22\32\3\0\5\32\1\334\22\32\42\0\1\335\32\0"+
    "\1\335\102\0\1\336\32\0\1\336\20\0\1\134\131\0"+
    "\2\32\6\0\26\32\1\337\3\0\27\32\1\337\64\0"+
    "\1\340\32\0\1\340\26\0\2\32\6\0\14\32\1\341"+
    "\12\32\3\0\15\32\1\341\12\32\26\0\2\32\6\0"+
    "\1\342\26\32\3\0\1\32\1\342\26\32\36\0\1\343"+
    "\32\0\1\343\54\0\2\32\6\0\10\32\1\344\16\32"+
    "\3\0\11\32\1\344\16\32\3\0\1\345\22\0\2\32"+
    "\6\0\23\32\1\346\3\32\3\0\24\32\1\346\3\32"+
    "\26\0\2\32\6\0\14\32\1\347\12\32\3\0\15\32"+
    "\1\347\12\32\52\0\1\350\32\0\1\350\40\0\2\32"+
    "\6\0\14\32\1\351\12\32\3\0\15\32\1\351\12\32"+
    "\52\0\1\352\32\0\1\352\73\0\1\353\32\0\1\353"+
    "\31\0\2\32\6\0\2\32\1\354\24\32\3\0\3\32"+
    "\1\354\24\32\40\0\1\355\32\0\1\355\52\0\2\32"+
    "\6\0\21\32\1\356\5\32\3\0\22\32\1\356\5\32"+
    "\4\0\1\357\52\0\1\357\32\0\1\357\11\0\1\357"+
    "\21\0\2\32\6\0\20\32\1\360\6\32\3\0\21\32"+
    "\1\360\6\32\26\0\2\32\6\0\11\32\1\361\15\32"+
    "\3\0\12\32\1\361\15\32\5\0\1\362\41\0\1\362"+
    "\32\0\1\362\22\0\1\362\20\0\2\32\6\0\11\32"+
    "\1\363\15\32\3\0\12\32\1\363\15\32\5\0\1\364"+
    "\41\0\1\364\32\0\1\364\22\0\1\364\50\0\1\365"+
    "\32\0\1\365\34\0\2\32\6\0\4\32\1\366\22\32"+
    "\3\0\5\32\1\366\22\32\42\0\1\367\32\0\1\367"+
    "\50\0\2\32\6\0\4\32\1\370\22\32\3\0\5\32"+
    "\1\370\22\32\42\0\1\371\32\0\1\371\50\0\2\32"+
    "\6\0\1\372\26\32\3\0\1\32\1\372\26\32\36\0"+
    "\1\373\32\0\1\373\54\0\2\32\6\0\12\32\1\374"+
    "\14\32\3\0\13\32\1\374\14\32\50\0\1\375\32\0"+
    "\1\375\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14560];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\6\1\1\11\1\1\1\11\1\1\1\11"+
    "\5\1\1\11\21\1\1\11\1\1\1\11\3\1\1\11"+
    "\2\1\1\11\1\0\1\1\1\0\2\11\2\1\2\0"+
    "\1\11\33\1\1\0\2\1\2\0\1\11\2\0\1\11"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\3\1\1\0\23\1\1\0\1\1\1\11\2\1"+
    "\3\0\1\11\2\0\2\1\1\0\1\1\1\0\3\1"+
    "\1\0\3\1\1\11\1\0\5\1\1\0\10\1\1\0"+
    "\2\1\1\11\4\0\1\1\1\0\1\1\1\11\2\1"+
    "\1\11\1\1\1\11\1\1\1\11\5\1\2\0\1\11"+
    "\6\1\1\0\1\1\1\11\2\0\1\1\1\0\5\1"+
    "\1\0\1\11\3\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\1\1\1\11\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public UnisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return IDENTIFIER_TOKEN;
            }
          // fall through
          case 64: break;
          case 2:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 65: break;
          case 3:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 66: break;
          case 4:
            { return BANG;
            }
          // fall through
          case 67: break;
          case 5:
            { return CIAPEK;
            }
          // fall through
          case 68: break;
          case 6:
            { return LPAREN;
            }
          // fall through
          case 69: break;
          case 7:
            { return RPAREN;
            }
          // fall through
          case 70: break;
          case 8:
            { return COMMA;
            }
          // fall through
          case 71: break;
          case 9:
            { return DOT;
            }
          // fall through
          case 72: break;
          case 10:
            { return INT_TOKEN;
            }
          // fall through
          case 73: break;
          case 11:
            { return COLON;
            }
          // fall through
          case 74: break;
          case 12:
            { return EQ;
            }
          // fall through
          case 75: break;
          case 13:
            { return AT;
            }
          // fall through
          case 76: break;
          case 14:
            { return LPARENSQ;
            }
          // fall through
          case 77: break;
          case 15:
            { return LAMBDA;
            }
          // fall through
          case 78: break;
          case 16:
            { return RPARENSQ;
            }
          // fall through
          case 79: break;
          case 17:
            { return UNDERSCORE;
            }
          // fall through
          case 80: break;
          case 18:
            { return LBRACE;
            }
          // fall through
          case 81: break;
          case 19:
            { return BAR;
            }
          // fall through
          case 82: break;
          case 20:
            { return RBRACE;
            }
          // fall through
          case 83: break;
          case 21:
            { return FORALLSYMBOL;
            }
          // fall through
          case 84: break;
          case 22:
            { return STRING_TOKEN;
            }
          // fall through
          case 85: break;
          case 23:
            { return LBRACECIAPEK;
            }
          // fall through
          case 86: break;
          case 24:
            { return EMPTYBRACES;
            }
          // fall through
          case 87: break;
          case 25:
            { return COMMENT;
            }
          // fall through
          case 88: break;
          case 26:
            { return ARROW;
            }
          // fall through
          case 89: break;
          case 27:
            { return CHAR_TOKEN;
            }
          // fall through
          case 90: break;
          case 28:
            { return DO;
            }
          // fall through
          case 91: break;
          case 29:
            { return IF;
            }
          // fall through
          case 92: break;
          case 30:
            { return DOUBLE_TOKEN;
            }
          // fall through
          case 93: break;
          case 31:
            { return INT;
            }
          // fall through
          case 94: break;
          case 32:
            { return LET;
            }
          // fall through
          case 95: break;
          case 33:
            { return MODW;
            }
          // fall through
          case 96: break;
          case 34:
            { return NAT;
            }
          // fall through
          case 97: break;
          case 35:
            { return NOT;
            }
          // fall through
          case 98: break;
          case 36:
            { return USE;
            }
          // fall through
          case 99: break;
          case 37:
            { return BYTES_TOKEN;
            }
          // fall through
          case 100: break;
          case 38:
            { return CHAR;
            }
          // fall through
          case 101: break;
          case 39:
            { return ELSE;
            }
          // fall through
          case 102: break;
          case 40:
            { return TEXT;
            }
          // fall through
          case 103: break;
          case 41:
            { return THEN;
            }
          // fall through
          case 104: break;
          case 42:
            { return BOOLEAN_TOKEN;
            }
          // fall through
          case 105: break;
          case 43:
            { return TYPE;
            }
          // fall through
          case 106: break;
          case 44:
            { return WITH;
            }
          // fall through
          case 107: break;
          case 45:
            { return ALIAS;
            }
          // fall through
          case 108: break;
          case 46:
            { return BYTES;
            }
          // fall through
          case 109: break;
          case 47:
            { return CASES;
            }
          // fall through
          case 110: break;
          case 48:
            { return FLOAT;
            }
          // fall through
          case 111: break;
          case 49:
            { return MATCH;
            }
          // fall through
          case 112: break;
          case 50:
            { return NUM_OPERATOR_TOKEN;
            }
          // fall through
          case 113: break;
          case 51:
            { return COMPARE_OPERATOR_TOKEN;
            }
          // fall through
          case 114: break;
          case 52:
            { return WHERE;
            }
          // fall through
          case 115: break;
          case 53:
            { return DOUBLE;
            }
          // fall through
          case 116: break;
          case 54:
            { return FORALL;
            }
          // fall through
          case 117: break;
          case 55:
            { return HANDLE;
            }
          // fall through
          case 118: break;
          case 56:
            { return UNIQUE;
            }
          // fall through
          case 119: break;
          case 57:
            { return ABILITY;
            }
          // fall through
          case 120: break;
          case 58:
            { return BOOLEAN;
            }
          // fall through
          case 121: break;
          case 59:
            { return TERMLINK;
            }
          // fall through
          case 122: break;
          case 60:
            { return TYPELINK;
            }
          // fall through
          case 123: break;
          case 61:
            { return NAMESPACE;
            }
          // fall through
          case 124: break;
          case 62:
            { return OTHERWISE;
            }
          // fall through
          case 125: break;
          case 63:
            { return STRUCTURAL;
            }
          // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
