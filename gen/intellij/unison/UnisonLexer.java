// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Unison.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
/* Unison lexer specification */
/* ===================== User Code =================== */
package intellij.unison;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.unison.language.psi.UnisonTypes.*;


public class UnisonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\11\22\1\23"+
    "\1\0\1\24\1\25\1\26\1\0\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\2\36"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\36\1\53\1\36\1\54\1\36\1\55"+
    "\1\56\1\57\1\0\1\60\1\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\36\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\36\1\53\1\36\1\54\1\36\1\61\1\62"+
    "\1\63\7\0\1\3\252\0\2\64\115\0\1\65\u01a8\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\17\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\1\1\0"+
    "\1\34\1\35\1\0\1\36\1\37\1\0\1\40\1\0"+
    "\2\24\1\41\2\24\1\42\13\24\1\0\2\24\2\0"+
    "\1\43\1\42\1\0\1\44\1\40\1\45\1\24\1\0"+
    "\1\24\1\0\1\24\1\0\1\24\1\46\2\24\1\47"+
    "\6\24\1\0\2\50\2\24\4\0\1\24\1\0\1\24"+
    "\1\0\2\51\1\0\4\24\1\52\1\53\1\54\1\24"+
    "\1\0\1\24\2\55\3\0\1\24\1\0\2\56\1\53"+
    "\1\57\1\24\1\0\3\24\1\0\1\60\1\36\1\0"+
    "\1\24\1\0\1\24\1\0\2\24\2\61\1\0\2\62"+
    "\1\24\1\0\1\24\1\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\1\24\1\0\2\63\2\64\1\24\1\0"+
    "\2\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\242\0\66\0\330\0\u010e"+
    "\0\66\0\66\0\66\0\66\0\66\0\u0144\0\66\0\66"+
    "\0\u017a\0\u01b0\0\66\0\66\0\u01e6\0\66\0\66\0\u021c"+
    "\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc"+
    "\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\66\0\66"+
    "\0\66\0\u0252\0\u0546\0\u057c\0\66\0\u05b2\0\u05e8\0\242"+
    "\0\242\0\66\0\u061e\0\u0654\0\66\0\u068a\0\u017a\0\u06c0"+
    "\0\u06f6\0\u072c\0\u0252\0\u0762\0\u0798\0\u0252\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\66\0\66"+
    "\0\u0b2e\0\66\0\u068a\0\66\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0252\0\u0cde\0\u0d14\0\u0252\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0252\0\66"+
    "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e"+
    "\0\u1074\0\u10aa\0\u0252\0\66\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u0252\0\u0252\0\u0252\0\u11ee\0\u1224\0\u125a\0\u0252"+
    "\0\66\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u0252\0\66"+
    "\0\66\0\u0252\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u0252\0\66\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u0252\0\66\0\u165c\0\u0252\0\66\0\u1692\0\u16c8"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u0252\0\66\0\u0252\0\66\0\u191a\0\u1950"+
    "\0\u0252\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\31\1\36\1\37"+
    "\1\40\1\41\1\42\3\31\1\43\1\44\1\45\1\46"+
    "\1\31\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\67\0\2\3\63\0\2\60\2\0\1\60"+
    "\1\61\60\60\7\0\1\62\56\0\10\63\1\0\55\63"+
    "\16\0\1\64\7\0\1\65\56\0\1\66\1\0\2\67"+
    "\62\0\1\66\1\0\2\22\70\0\1\70\61\0\2\31"+
    "\5\0\1\31\1\71\23\31\3\0\1\31\26\0\2\31"+
    "\5\0\25\31\3\0\1\31\26\0\2\31\5\0\1\72"+
    "\24\31\3\0\1\31\26\0\2\31\5\0\14\31\1\73"+
    "\10\31\3\0\1\31\26\0\2\31\5\0\11\31\1\74"+
    "\13\31\3\0\1\31\26\0\2\31\5\0\1\75\24\31"+
    "\3\0\1\31\26\0\2\31\5\0\5\31\1\76\17\31"+
    "\3\0\1\31\26\0\2\31\5\0\4\31\1\77\20\31"+
    "\3\0\1\31\26\0\2\31\5\0\1\100\24\31\3\0"+
    "\1\31\26\0\2\31\5\0\1\101\13\31\1\102\10\31"+
    "\3\0\1\31\26\0\2\31\5\0\21\31\1\103\3\31"+
    "\3\0\1\31\26\0\2\31\5\0\21\31\1\104\3\31"+
    "\3\0\1\31\26\0\2\31\5\0\7\31\1\105\7\31"+
    "\1\106\4\31\1\107\3\0\1\31\26\0\2\31\5\0"+
    "\13\31\1\110\4\31\1\111\4\31\3\0\1\31\4\0"+
    "\1\112\21\0\2\31\5\0\7\31\1\113\1\114\14\31"+
    "\3\0\1\31\3\0\1\115\17\0\1\116\131\0\1\117"+
    "\40\0\1\120\101\0\1\121\24\0\1\122\55\0\2\64"+
    "\1\0\63\64\21\0\2\123\70\0\1\124\61\0\2\31"+
    "\5\0\10\31\1\125\14\31\3\0\1\31\3\0\1\126"+
    "\22\0\2\31\5\0\20\31\1\127\4\31\3\0\1\31"+
    "\4\0\1\130\21\0\2\31\5\0\20\31\1\131\4\31"+
    "\3\0\1\31\4\0\1\132\21\0\2\31\5\0\11\31"+
    "\1\133\13\31\3\0\1\31\26\0\2\31\5\0\21\31"+
    "\1\134\3\31\3\0\1\31\26\0\2\31\5\0\21\31"+
    "\1\135\3\31\3\0\1\31\26\0\2\31\5\0\12\31"+
    "\1\136\12\31\3\0\1\31\26\0\2\31\5\0\21\31"+
    "\1\137\3\31\3\0\1\31\26\0\2\31\5\0\7\31"+
    "\1\140\15\31\3\0\1\31\26\0\2\31\5\0\17\31"+
    "\1\141\5\31\3\0\1\31\26\0\2\31\5\0\4\31"+
    "\1\142\20\31\3\0\1\31\26\0\2\31\5\0\22\31"+
    "\1\143\2\31\3\0\1\31\26\0\2\31\5\0\15\31"+
    "\1\144\7\31\3\0\1\31\26\0\2\31\5\0\10\31"+
    "\1\145\14\31\3\0\1\31\3\0\1\146\22\0\2\31"+
    "\5\0\4\31\1\147\20\31\3\0\1\31\41\0\1\150"+
    "\52\0\2\31\5\0\4\31\1\151\20\31\3\0\1\31"+
    "\26\0\2\31\5\0\21\31\1\152\3\31\3\0\1\31"+
    "\56\0\1\153\14\0\16\154\1\155\47\154\47\0\1\156"+
    "\37\0\2\31\5\0\11\31\1\157\13\31\3\0\1\31"+
    "\46\0\1\160\45\0\2\31\5\0\4\31\1\161\20\31"+
    "\3\0\1\31\41\0\1\162\52\0\2\31\5\0\4\31"+
    "\1\163\20\31\3\0\1\31\41\0\1\164\52\0\2\31"+
    "\5\0\20\31\1\143\4\31\3\0\1\31\4\0\1\165"+
    "\21\0\2\31\5\0\2\31\1\166\22\31\3\0\1\31"+
    "\26\0\2\31\5\0\4\31\1\167\20\31\3\0\1\31"+
    "\26\0\2\31\5\0\4\31\1\170\20\31\3\0\1\31"+
    "\26\0\2\31\5\0\22\31\1\171\2\31\3\0\1\31"+
    "\26\0\2\31\5\0\13\31\1\172\11\31\3\0\1\31"+
    "\26\0\2\31\5\0\4\31\1\173\20\31\3\0\1\31"+
    "\26\0\2\31\5\0\4\31\1\174\20\31\3\0\1\31"+
    "\26\0\2\31\5\0\16\31\1\175\6\31\3\0\1\31"+
    "\53\0\1\176\40\0\2\31\5\0\17\31\1\177\5\31"+
    "\3\0\1\31\26\0\2\31\5\0\7\31\1\200\15\31"+
    "\3\0\1\31\44\0\1\201\26\0\16\154\1\202\47\154"+
    "\16\0\1\203\121\0\1\204\34\0\2\31\5\0\10\31"+
    "\1\205\14\31\3\0\1\31\3\0\1\206\41\0\1\206"+
    "\23\0\1\206\22\0\2\31\5\0\20\31\1\207\4\31"+
    "\3\0\1\31\4\0\1\210\50\0\1\210\14\0\1\210"+
    "\34\0\1\211\52\0\2\31\5\0\7\31\1\212\15\31"+
    "\3\0\1\31\26\0\2\31\5\0\20\31\1\213\4\31"+
    "\3\0\1\31\4\0\1\214\21\0\2\31\5\0\17\31"+
    "\1\215\5\31\3\0\1\31\26\0\2\31\5\0\2\31"+
    "\1\216\22\31\3\0\1\31\26\0\2\31\5\0\22\31"+
    "\1\217\2\31\3\0\1\31\57\0\1\220\34\0\2\31"+
    "\5\0\4\31\1\221\20\31\3\0\1\31\5\0\16\154"+
    "\1\202\44\154\1\222\2\154\16\0\1\203\44\0\1\222"+
    "\34\0\1\223\54\0\2\31\5\0\21\31\1\224\3\31"+
    "\3\0\1\31\56\0\1\225\35\0\2\31\5\0\15\31"+
    "\1\226\7\31\3\0\1\31\52\0\1\227\41\0\2\31"+
    "\5\0\23\31\1\230\1\31\3\0\1\31\26\0\2\31"+
    "\5\0\21\31\1\231\3\31\3\0\1\31\26\0\2\31"+
    "\5\0\4\31\1\232\20\31\3\0\1\31\41\0\1\233"+
    "\102\0\1\234\35\0\2\31\5\0\24\31\1\235\3\0"+
    "\1\31\61\0\1\236\32\0\2\31\5\0\1\237\24\31"+
    "\3\0\1\31\35\0\1\240\56\0\2\31\5\0\10\31"+
    "\1\241\14\31\3\0\1\31\3\0\1\242\22\0\2\31"+
    "\5\0\22\31\1\243\2\31\3\0\1\31\57\0\1\244"+
    "\34\0\2\31\5\0\2\31\1\245\22\31\3\0\1\31"+
    "\37\0\1\246\54\0\2\31\5\0\20\31\1\247\4\31"+
    "\3\0\1\31\4\0\1\250\50\0\1\250\14\0\1\250"+
    "\21\0\2\31\5\0\17\31\1\251\5\31\3\0\1\31"+
    "\54\0\1\252\37\0\2\31\5\0\4\31\1\253\20\31"+
    "\3\0\1\31\41\0\1\254\52\0\2\31\5\0\4\31"+
    "\1\255\20\31\3\0\1\31\41\0\1\256\52\0\2\31"+
    "\5\0\1\257\24\31\3\0\1\31\35\0\1\260\56\0"+
    "\2\31\5\0\11\31\1\261\13\31\3\0\1\31\46\0"+
    "\1\262\24\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6534];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\2\1\5\11"+
    "\1\1\2\11\2\1\2\11\1\1\2\11\17\1\3\11"+
    "\3\1\1\11\2\1\1\0\1\1\1\11\1\0\1\1"+
    "\1\11\1\0\1\1\1\0\21\1\1\0\2\1\2\0"+
    "\2\11\1\0\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\13\1\1\0\1\1\1\11\2\1"+
    "\4\0\1\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\10\1\1\0\2\1\1\11\3\0\1\1\1\0\1\1"+
    "\2\11\2\1\1\0\3\1\1\0\1\1\1\11\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\11\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public UnisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 54: break;
          case 2:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 55: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 56: break;
          case 4:
            { return MOD;
            }
          // fall through
          case 57: break;
          case 5:
            { return CIAPEK;
            }
          // fall through
          case 58: break;
          case 6:
            { return LPAREN;
            }
          // fall through
          case 59: break;
          case 7:
            { return RPAREN;
            }
          // fall through
          case 60: break;
          case 8:
            { return STAR;
            }
          // fall through
          case 61: break;
          case 9:
            { return PLUS;
            }
          // fall through
          case 62: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 63: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 64: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 65: break;
          case 13:
            { return DIV;
            }
          // fall through
          case 66: break;
          case 14:
            { return INT;
            }
          // fall through
          case 67: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 68: break;
          case 16:
            { return GT;
            }
          // fall through
          case 69: break;
          case 17:
            { return EQ;
            }
          // fall through
          case 70: break;
          case 18:
            { return LT;
            }
          // fall through
          case 71: break;
          case 19:
            { return AT;
            }
          // fall through
          case 72: break;
          case 20:
            { return IDENTIFIER_TOKEN;
            }
          // fall through
          case 73: break;
          case 21:
            { return LPARENSQ;
            }
          // fall through
          case 74: break;
          case 22:
            { return LAMBDA;
            }
          // fall through
          case 75: break;
          case 23:
            { return RPARENSQ;
            }
          // fall through
          case 76: break;
          case 24:
            { return UNDERSCORE;
            }
          // fall through
          case 77: break;
          case 25:
            { return LBRACE;
            }
          // fall through
          case 78: break;
          case 26:
            { return BAR;
            }
          // fall through
          case 79: break;
          case 27:
            { return RBRACE;
            }
          // fall through
          case 80: break;
          case 28:
            { return STRING;
            }
          // fall through
          case 81: break;
          case 29:
            { return AND;
            }
          // fall through
          case 82: break;
          case 30:
            { return COMMENT;
            }
          // fall through
          case 83: break;
          case 31:
            { return ARROW;
            }
          // fall through
          case 84: break;
          case 32:
            { return DOUBLE;
            }
          // fall through
          case 85: break;
          case 33:
            { return DO;
            }
          // fall through
          case 86: break;
          case 34:
            { return IF;
            }
          // fall through
          case 87: break;
          case 35:
            { return OR;
            }
          // fall through
          case 88: break;
          case 36:
            { return CHAR;
            }
          // fall through
          case 89: break;
          case 37:
            { return EQ3;
            }
          // fall through
          case 90: break;
          case 38:
            { return LET;
            }
          // fall through
          case 91: break;
          case 39:
            { return NOT;
            }
          // fall through
          case 92: break;
          case 40:
            { return USE;
            }
          // fall through
          case 93: break;
          case 41:
            { return ELSE;
            }
          // fall through
          case 94: break;
          case 42:
            { return THEN;
            }
          // fall through
          case 95: break;
          case 43:
            { return BOOLEAN;
            }
          // fall through
          case 96: break;
          case 44:
            { return TYPE;
            }
          // fall through
          case 97: break;
          case 45:
            { return WITH;
            }
          // fall through
          case 98: break;
          case 46:
            { return CASES;
            }
          // fall through
          case 99: break;
          case 47:
            { return MATCH;
            }
          // fall through
          case 100: break;
          case 48:
            { return WHERE;
            }
          // fall through
          case 101: break;
          case 49:
            { return UNIQUE;
            }
          // fall through
          case 102: break;
          case 50:
            { return ABILITY;
            }
          // fall through
          case 103: break;
          case 51:
            { return NAMESPACE;
            }
          // fall through
          case 104: break;
          case 52:
            { return OTHERWISE;
            }
          // fall through
          case 105: break;
          case 53:
            { return STRUCTURAL;
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
