// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Unison.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
/* Unison lexer specification */
/* ===================== User Code =================== */
package intellij.unison;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.unison.language.psi.UnisonTypes.*;


public class UnisonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\37"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\37\1\54\1\37\1\55\1\37\1\56"+
    "\1\57\1\60\1\6\1\61\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\37\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\37\1\54\1\37\1\55\1\37\1\62\1\63"+
    "\1\64\1\6\6\0\1\3\252\0\2\65\115\0\1\66"+
    "\u01a8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\2\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\17\1\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\2\1\0\1\34\1\35\1\17\1\36\1\37\1\0"+
    "\1\1\1\40\2\1\1\41\2\1\1\42\13\1\1\0"+
    "\2\1\2\0\1\43\1\42\1\0\2\34\1\44\1\45"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\46"+
    "\2\1\1\47\6\1\1\0\2\50\2\1\6\0\1\1"+
    "\1\0\1\1\1\0\2\51\1\0\4\1\1\52\1\53"+
    "\1\54\1\1\1\0\1\1\2\55\4\0\1\1\1\0"+
    "\2\56\1\53\1\57\1\1\1\0\3\1\1\0\1\60"+
    "\1\36\2\0\1\1\1\0\1\1\1\0\2\1\2\61"+
    "\1\0\1\34\2\62\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\63"+
    "\2\64\1\1\1\0\2\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\245\0\245\0\u0113"+
    "\0\67\0\67\0\67\0\245\0\u014a\0\67\0\u0181\0\67"+
    "\0\245\0\u01b8\0\245\0\245\0\u01ef\0\245\0\u0226\0\67"+
    "\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de"+
    "\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\67"+
    "\0\245\0\67\0\u0294\0\u0596\0\u05cd\0\67\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\245\0\u06e0\0\u0717\0\245\0\u074e\0\u0785"+
    "\0\67\0\u07bc\0\u07f3\0\u0294\0\u082a\0\u0861\0\u0294\0\u0898"+
    "\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\245"+
    "\0\67\0\u0c08\0\u0672\0\u0c3f\0\u074e\0\245\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0294\0\u0df7\0\u0e2e"+
    "\0\u0294\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    "\0\u0294\0\67\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9"+
    "\0\u0c3f\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u0294\0\67"+
    "\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u0294\0\u0294\0\u0294"+
    "\0\u1356\0\u138d\0\u13c4\0\u0294\0\67\0\u13fb\0\u1432\0\u1469"+
    "\0\u14a0\0\u14d7\0\u150e\0\u0294\0\67\0\67\0\u0294\0\u1545"+
    "\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u0294\0\67\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u0294"+
    "\0\67\0\u1847\0\67\0\u0294\0\67\0\u187e\0\u18b5\0\u18ec"+
    "\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4"+
    "\0\u1adb\0\u0294\0\67\0\u0294\0\67\0\u1b12\0\u1b49\0\u0294"+
    "\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\2\32\1\37"+
    "\1\40\1\41\1\42\1\43\3\32\1\44\1\45\1\46"+
    "\1\47\1\32\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\70\0\2\3\70\0\1\6\1\0"+
    "\3\6\3\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\30\0\1\6\3\0\1\6\3\0\2\61\1\0"+
    "\2\61\1\62\61\61\4\0\1\6\1\0\2\6\1\63"+
    "\3\0\2\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\30\0\1\6\3\0\1\6\7\0\1\6\1\0\3\6"+
    "\3\0\2\6\1\0\1\6\1\0\1\6\1\64\4\6"+
    "\30\0\1\6\3\0\1\6\7\0\1\6\1\0\3\6"+
    "\3\0\2\6\1\0\1\65\1\0\1\6\1\64\3\6"+
    "\1\66\30\0\1\6\3\0\1\6\23\0\1\67\1\0"+
    "\1\22\50\0\1\6\1\0\3\6\3\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\1\70\1\6\30\0"+
    "\1\6\3\0\1\6\3\0\2\71\2\0\63\71\22\0"+
    "\1\32\6\0\1\32\1\72\23\32\3\0\1\32\27\0"+
    "\1\32\6\0\25\32\3\0\1\32\27\0\1\32\6\0"+
    "\1\73\24\32\3\0\1\32\27\0\1\32\6\0\14\32"+
    "\1\74\10\32\3\0\1\32\27\0\1\32\6\0\11\32"+
    "\1\75\13\32\3\0\1\32\27\0\1\32\6\0\1\76"+
    "\24\32\3\0\1\32\27\0\1\32\6\0\5\32\1\77"+
    "\17\32\3\0\1\32\27\0\1\32\6\0\4\32\1\100"+
    "\20\32\3\0\1\32\27\0\1\32\6\0\1\101\24\32"+
    "\3\0\1\32\27\0\1\32\6\0\1\102\13\32\1\103"+
    "\10\32\3\0\1\32\27\0\1\32\6\0\21\32\1\104"+
    "\3\32\3\0\1\32\27\0\1\32\6\0\21\32\1\105"+
    "\3\32\3\0\1\32\27\0\1\32\6\0\7\32\1\106"+
    "\7\32\1\107\4\32\1\110\3\0\1\32\27\0\1\32"+
    "\6\0\13\32\1\111\4\32\1\112\4\32\3\0\1\32"+
    "\4\0\1\113\22\0\1\32\6\0\7\32\1\114\1\115"+
    "\14\32\3\0\1\32\3\0\1\116\20\0\1\117\53\0"+
    "\1\6\1\0\3\6\3\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\30\0\1\6\3\0\1\120\41\0"+
    "\1\121\102\0\1\122\14\0\2\61\1\0\2\61\1\123"+
    "\63\61\1\0\2\61\1\124\61\61\22\0\1\64\44\0"+
    "\2\65\1\0\64\65\22\0\1\125\50\0\1\6\1\0"+
    "\3\6\3\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\1\126\1\6\30\0\1\6\3\0\1\6\25\0"+
    "\1\32\6\0\10\32\1\127\14\32\3\0\1\32\3\0"+
    "\1\130\23\0\1\32\6\0\20\32\1\131\4\32\3\0"+
    "\1\32\4\0\1\132\22\0\1\32\6\0\20\32\1\133"+
    "\4\32\3\0\1\32\4\0\1\134\22\0\1\32\6\0"+
    "\11\32\1\135\13\32\3\0\1\32\27\0\1\32\6\0"+
    "\21\32\1\136\3\32\3\0\1\32\27\0\1\32\6\0"+
    "\21\32\1\137\3\32\3\0\1\32\27\0\1\32\6\0"+
    "\12\32\1\140\12\32\3\0\1\32\27\0\1\32\6\0"+
    "\21\32\1\141\3\32\3\0\1\32\27\0\1\32\6\0"+
    "\7\32\1\142\15\32\3\0\1\32\27\0\1\32\6\0"+
    "\17\32\1\143\5\32\3\0\1\32\27\0\1\32\6\0"+
    "\4\32\1\144\20\32\3\0\1\32\27\0\1\32\6\0"+
    "\22\32\1\145\2\32\3\0\1\32\27\0\1\32\6\0"+
    "\15\32\1\146\7\32\3\0\1\32\27\0\1\32\6\0"+
    "\10\32\1\147\14\32\3\0\1\32\3\0\1\150\23\0"+
    "\1\32\6\0\4\32\1\151\20\32\3\0\1\32\42\0"+
    "\1\152\53\0\1\32\6\0\4\32\1\153\20\32\3\0"+
    "\1\32\27\0\1\32\6\0\21\32\1\154\3\32\3\0"+
    "\1\32\57\0\1\155\14\0\17\156\1\157\47\156\50\0"+
    "\1\160\16\0\2\161\1\162\2\161\1\123\61\161\22\0"+
    "\1\32\6\0\11\32\1\163\13\32\3\0\1\32\47\0"+
    "\1\164\46\0\1\32\6\0\4\32\1\165\20\32\3\0"+
    "\1\32\42\0\1\166\53\0\1\32\6\0\4\32\1\167"+
    "\20\32\3\0\1\32\42\0\1\170\53\0\1\32\6\0"+
    "\20\32\1\145\4\32\3\0\1\32\4\0\1\171\22\0"+
    "\1\32\6\0\2\32\1\172\22\32\3\0\1\32\27\0"+
    "\1\32\6\0\4\32\1\173\20\32\3\0\1\32\27\0"+
    "\1\32\6\0\4\32\1\174\20\32\3\0\1\32\27\0"+
    "\1\32\6\0\22\32\1\175\2\32\3\0\1\32\27\0"+
    "\1\32\6\0\13\32\1\176\11\32\3\0\1\32\27\0"+
    "\1\32\6\0\4\32\1\177\20\32\3\0\1\32\27\0"+
    "\1\32\6\0\4\32\1\200\20\32\3\0\1\32\27\0"+
    "\1\32\6\0\16\32\1\201\6\32\3\0\1\32\54\0"+
    "\1\202\41\0\1\32\6\0\17\32\1\203\5\32\3\0"+
    "\1\32\27\0\1\32\6\0\7\32\1\204\15\32\3\0"+
    "\1\32\45\0\1\205\26\0\17\156\1\206\47\156\17\0"+
    "\1\207\122\0\1\210\13\0\5\162\1\211\61\162\22\0"+
    "\1\32\6\0\10\32\1\212\14\32\3\0\1\32\3\0"+
    "\1\213\42\0\1\213\23\0\1\213\23\0\1\32\6\0"+
    "\20\32\1\214\4\32\3\0\1\32\4\0\1\215\51\0"+
    "\1\215\14\0\1\215\35\0\1\216\53\0\1\32\6\0"+
    "\7\32\1\217\15\32\3\0\1\32\27\0\1\32\6\0"+
    "\20\32\1\220\4\32\3\0\1\32\4\0\1\221\22\0"+
    "\1\32\6\0\17\32\1\222\5\32\3\0\1\32\27\0"+
    "\1\32\6\0\2\32\1\223\22\32\3\0\1\32\27\0"+
    "\1\32\6\0\22\32\1\224\2\32\3\0\1\32\60\0"+
    "\1\225\35\0\1\32\6\0\4\32\1\226\20\32\3\0"+
    "\1\32\5\0\17\156\1\206\44\156\1\227\2\156\17\0"+
    "\1\207\44\0\1\227\35\0\1\230\40\0\1\231\103\0"+
    "\1\32\6\0\21\32\1\232\3\32\3\0\1\32\57\0"+
    "\1\233\36\0\1\32\6\0\15\32\1\234\7\32\3\0"+
    "\1\32\53\0\1\235\42\0\1\32\6\0\23\32\1\236"+
    "\1\32\3\0\1\32\27\0\1\32\6\0\21\32\1\237"+
    "\3\32\3\0\1\32\27\0\1\32\6\0\4\32\1\240"+
    "\20\32\3\0\1\32\42\0\1\241\103\0\1\242\21\0"+
    "\1\243\103\0\1\32\6\0\24\32\1\244\3\0\1\32"+
    "\62\0\1\245\33\0\1\32\6\0\1\246\24\32\3\0"+
    "\1\32\36\0\1\247\57\0\1\32\6\0\10\32\1\250"+
    "\14\32\3\0\1\32\3\0\1\251\23\0\1\32\6\0"+
    "\22\32\1\252\2\32\3\0\1\32\60\0\1\253\35\0"+
    "\1\32\6\0\2\32\1\254\22\32\3\0\1\32\40\0"+
    "\1\255\55\0\1\32\6\0\20\32\1\256\4\32\3\0"+
    "\1\32\4\0\1\257\51\0\1\257\14\0\1\257\22\0"+
    "\1\32\6\0\17\32\1\260\5\32\3\0\1\32\55\0"+
    "\1\261\40\0\1\32\6\0\4\32\1\262\20\32\3\0"+
    "\1\32\42\0\1\263\53\0\1\32\6\0\4\32\1\264"+
    "\20\32\3\0\1\32\42\0\1\265\53\0\1\32\6\0"+
    "\1\266\24\32\3\0\1\32\36\0\1\267\57\0\1\32"+
    "\6\0\11\32\1\270\13\32\3\0\1\32\47\0\1\271"+
    "\24\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7040];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\6\1\3\11\2\1\1\11\1\1\1\11"+
    "\7\1\1\11\17\1\1\11\1\1\1\11\3\1\1\11"+
    "\2\1\1\0\5\1\1\0\1\1\1\11\21\1\1\0"+
    "\2\1\2\0\1\1\1\11\1\0\5\1\1\0\1\1"+
    "\1\0\1\1\1\0\13\1\1\0\1\1\1\11\2\1"+
    "\6\0\1\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\10\1\1\0\2\1\1\11\4\0\1\1\1\0\1\1"+
    "\2\11\2\1\1\0\3\1\1\0\1\1\1\11\2\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\11\1\0\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public UnisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return IDENTIFIER_TOKEN;
            }
          // fall through
          case 54: break;
          case 2:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 55: break;
          case 3:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 56: break;
          case 4:
            { return BANG;
            }
          // fall through
          case 57: break;
          case 5:
            { return MOD;
            }
          // fall through
          case 58: break;
          case 6:
            { return CIAPEK;
            }
          // fall through
          case 59: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 60: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 61: break;
          case 9:
            { return STAR;
            }
          // fall through
          case 62: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 63: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 64: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 65: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 66: break;
          case 14:
            { return DIV;
            }
          // fall through
          case 67: break;
          case 15:
            { return INT_TOKEN;
            }
          // fall through
          case 68: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 69: break;
          case 17:
            { return GT;
            }
          // fall through
          case 70: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 71: break;
          case 19:
            { return LT;
            }
          // fall through
          case 72: break;
          case 20:
            { return AT;
            }
          // fall through
          case 73: break;
          case 21:
            { return LPARENSQ;
            }
          // fall through
          case 74: break;
          case 22:
            { return LAMBDA;
            }
          // fall through
          case 75: break;
          case 23:
            { return RPARENSQ;
            }
          // fall through
          case 76: break;
          case 24:
            { return UNDERSCORE;
            }
          // fall through
          case 77: break;
          case 25:
            { return LBRACE;
            }
          // fall through
          case 78: break;
          case 26:
            { return BAR;
            }
          // fall through
          case 79: break;
          case 27:
            { return RBRACE;
            }
          // fall through
          case 80: break;
          case 28:
            { return STRING_TOKEN;
            }
          // fall through
          case 81: break;
          case 29:
            { return AND;
            }
          // fall through
          case 82: break;
          case 30:
            { return COMMENT;
            }
          // fall through
          case 83: break;
          case 31:
            { return ARROW;
            }
          // fall through
          case 84: break;
          case 32:
            { return CHAR_TOKEN;
            }
          // fall through
          case 85: break;
          case 33:
            { return DO;
            }
          // fall through
          case 86: break;
          case 34:
            { return IF;
            }
          // fall through
          case 87: break;
          case 35:
            { return OR;
            }
          // fall through
          case 88: break;
          case 36:
            { return DOUBLE_TOKEN;
            }
          // fall through
          case 89: break;
          case 37:
            { return EQ3;
            }
          // fall through
          case 90: break;
          case 38:
            { return LET;
            }
          // fall through
          case 91: break;
          case 39:
            { return NOT;
            }
          // fall through
          case 92: break;
          case 40:
            { return USE;
            }
          // fall through
          case 93: break;
          case 41:
            { return ELSE;
            }
          // fall through
          case 94: break;
          case 42:
            { return THEN;
            }
          // fall through
          case 95: break;
          case 43:
            { return BOOLEAN_TOKEN;
            }
          // fall through
          case 96: break;
          case 44:
            { return TYPE;
            }
          // fall through
          case 97: break;
          case 45:
            { return WITH;
            }
          // fall through
          case 98: break;
          case 46:
            { return CASES;
            }
          // fall through
          case 99: break;
          case 47:
            { return MATCH;
            }
          // fall through
          case 100: break;
          case 48:
            { return WHERE;
            }
          // fall through
          case 101: break;
          case 49:
            { return UNIQUE;
            }
          // fall through
          case 102: break;
          case 50:
            { return ABILITY;
            }
          // fall through
          case 103: break;
          case 51:
            { return NAMESPACE;
            }
          // fall through
          case 104: break;
          case 52:
            { return OTHERWISE;
            }
          // fall through
          case 105: break;
          case 53:
            { return STRUCTURAL;
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
